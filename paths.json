{
    "paths": {
        "/az_proxy": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "type": "string",
                        "description": "Availability Zone Name",
                        "name": "az_name"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "description": "HTTP method to call",
                        "in": "query",
                        "name": "method"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "description": "URL path to call on remote cluster",
                        "in": "query",
                        "name": "url_path"
                    },
                    {
                        "in": "query",
                        "type": "string",
                        "description": "content type for the call",
                        "name": "content_type"
                    },
                    {
                        "in": "body",
                        "name": "az_proxy_body",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                ],
                "tags": [
                    "remote_connections"
                ],
                "description": "Proxies request to remote cluster, uses remote connection\nto call endpoint on remote cluster\n",
                "x-doc-hide": true,
                "summary": "Proxies request to remote AZ"
            }
        },
        "/batch": {
            "post": {
                "description": "Batching allows for instructions for several operations to be sent\nusing a single HTTP request. Depending on the batch parameters, the\nNutanix v3 gateway processes each independent operation sequentially.\nOnce all operations in the batch have been completed, a consolidated\nresponse is returned and the HTTP connection is closed. The batch API\ntakes an array of logical HTTP requests represented as JSON arrays.\nMaximum size of the array should not exceed 60.\nEach request comprises the following:\n- A method (corresponding to HTTP methods such as GET, PUT, and POST)\n- A relative URL (relative_url)\n- (Optional) A body (for POST and PUT requests).\nThe batch API returns an array of logical HTTP responses represented\nas JSON arrays containing the following:\n- A status code\n- (Optional) A body represented as a JSON-encoded string\n",
                "tags": [
                    "batch"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/batch_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "List of intent APIs",
                        "name": "intent_list",
                        "schema": {
                            "$ref": "#/definitions/batch_request"
                        }
                    }
                ],
                "summary": "Submit a list of one or more intentful REST APIs to be processed"
            }
        },
        "/blackouts": {
            "post": {
                "description": "Create a blackout object",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Create blackout object",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_input"
                        }
                    }
                ],
                "tags": [
                    "blackout"
                ],
                "x-doc-hide": true,
                "summary": "Create blackout object",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "blackout",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_response"
                        }
                    }
                }
            }
        },
        "/blackouts/list": {
            "post": {
                "description": "Retrieve all blackout objects",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/blackout_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "blackout"
                ],
                "x-doc-hide": true,
                "summary": "Retrieve all blackout objects",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "blackout",
                "responses": {
                    "200": {
                        "description": "Retrieve all blackout objects",
                        "schema": {
                            "$ref": "#/definitions/blackout_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Failed to retrieve blackout objects",
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    }
                }
            }
        },
        "/blackouts/{uuid}": {
            "put": {
                "description": "Update blackout entity",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Update blackout",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_input"
                        }
                    }
                ],
                "tags": [
                    "blackout"
                ],
                "x-doc-hide": true,
                "summary": "Update blackout entity",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "blackout",
                "responses": {
                    "default": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    },
                    "202": {
                        "description": "Request Succeeded",
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "Retrieve specified blackout object",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "blackout"
                ],
                "x-doc-hide": true,
                "summary": "Retrieve specified blackout object",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "blackout",
                "responses": {
                    "default": {
                        "description": "Failed to retrieve blackout object",
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    },
                    "202": {
                        "description": "Request succeeded",
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete specified blackout object",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "blackout"
                ],
                "x-doc-hide": true,
                "summary": "Delete specified blackout object",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "blackout",
                "responses": {
                    "default": {
                        "description": "Failed to delete blackout object",
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    },
                    "202": {
                        "description": "Request succeeded",
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_response"
                        }
                    }
                }
            }
        },
        "/categories/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/category_key_list_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                },
                "description": "List the category keys.\n",
                "parameters": [
                    {
                        "required": false,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/category_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "category"
                ],
                "x-ntnx-operations": [
                    "view_name"
                ],
                "x-ntnx-kind": "category",
                "summary": "List the category keys."
            }
        },
        "/categories/{name}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/category_key_status"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/category_key_status"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                },
                "description": "Create or Update a category Key.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "name",
                        "in": "path",
                        "maxLength": 64
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "spec",
                        "schema": {
                            "$ref": "#/definitions/category_key"
                        }
                    }
                ],
                "tags": [
                    "category"
                ],
                "x-ntnx-operations": [
                    "create_or_update_name"
                ],
                "x-ntnx-kind": "category",
                "summary": "Create or Update a category Key."
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/category_key_status"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                },
                "description": "Get a category key.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "name",
                        "in": "path",
                        "maxLength": 64
                    }
                ],
                "tags": [
                    "category"
                ],
                "x-ntnx-operations": [
                    "view_name"
                ],
                "x-ntnx-kind": "category",
                "summary": "Get a category key."
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                },
                "description": "Delete a category Key.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "name",
                        "in": "path",
                        "maxLength": 64
                    }
                ],
                "tags": [
                    "category"
                ],
                "x-ntnx-operations": [
                    "delete_name"
                ],
                "x-ntnx-kind": "category",
                "summary": "Delete a category Key."
            }
        },
        "/categories/{name}/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/category_value_list_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                },
                "description": "List the values for a specified key.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "name",
                        "in": "path",
                        "maxLength": 64
                    },
                    {
                        "required": false,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/category_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "category"
                ],
                "x-ntnx-operations": [
                    "view_value"
                ],
                "x-ntnx-kind": "category",
                "summary": "List the values for a specified key."
            }
        },
        "/categories/{name}/{value}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/category_value_status"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/category_value_status"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                },
                "description": "Create or Update a category value. Creates when value doesn't exist.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "name",
                        "in": "path",
                        "maxLength": 64
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "value",
                        "in": "path",
                        "maxLength": 64
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "spec",
                        "schema": {
                            "$ref": "#/definitions/category_value"
                        }
                    }
                ],
                "tags": [
                    "category"
                ],
                "x-ntnx-operations": [
                    "create_or_update_value"
                ],
                "x-ntnx-kind": "category",
                "summary": "Create or Update a category value."
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/category_value_status"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                },
                "description": "Get a category value.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "name",
                        "in": "path",
                        "maxLength": 64
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "value",
                        "in": "path",
                        "maxLength": 64
                    }
                ],
                "tags": [
                    "category"
                ],
                "x-ntnx-operations": [
                    "view_value"
                ],
                "x-ntnx-kind": "category",
                "summary": "Get a category value."
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                },
                "description": "Delete a category value.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "name",
                        "in": "path",
                        "maxLength": 64
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "value",
                        "in": "path",
                        "maxLength": 64
                    }
                ],
                "tags": [
                    "category"
                ],
                "x-ntnx-operations": [
                    "delete_value"
                ],
                "x-ntnx-kind": "category",
                "summary": "Delete a category value."
            }
        },
        "/category/query": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/category_query_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                },
                "description": "Get list of entities attached to categories or policies in which categories are used as defined by the filter criteria.\n",
                "parameters": [
                    {
                        "in": "body",
                        "name": "query",
                        "schema": {
                            "$ref": "#/definitions/category_query_input"
                        }
                    }
                ],
                "tags": [
                    "category"
                ],
                "x-ntnx-operations": [
                    "view_value"
                ],
                "x-ntnx-kind": "category",
                "summary": "Get category usage details."
            }
        },
        "/cells": {
            "post": {
                "description": "Create a cell instance",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Create cell object",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/cell_intent_input"
                        }
                    }
                ],
                "tags": [
                    "cell"
                ],
                "x-doc-hide": true,
                "summary": "Create a cell instance",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "cell",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/cell_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    }
                }
            }
        },
        "/cells/list": {
            "post": {
                "description": "Retrieves all cells",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/cell_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "cell"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves all cells",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "cell",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/cell_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    }
                }
            }
        },
        "/cells/{uuid}": {
            "put": {
                "description": "Update cell",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Update cell",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/cell_intent_input"
                        }
                    }
                ],
                "tags": [
                    "cell"
                ],
                "x-doc-hide": true,
                "summary": "Update cell",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "cell",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/cell_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    }
                }
            },
            "get": {
                "description": "Retrieves specified cell",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "cell"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves specified cell",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "cell",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/cell_intent_response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete specified cell",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "cell"
                ],
                "x-doc-hide": true,
                "summary": "Delete specified cell",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "cell",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/cell_intent_response"
                        }
                    }
                }
            }
        },
        "/common_report_configs": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_input"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-doc-hide": true,
                "summary": "Create common report config.",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "common_report_config",
                "description": "This operation submits a request to create a common report\nconfiguration with associated metadata based on the intentful spec.\n"
            }
        },
        "/common_report_configs/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-doc-hide": true,
                "summary": "List the common report configs.",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "common_report_config",
                "description": "This operation retrieves a list of all the common report\nconfigurations with associated metadata.\n"
            }
        },
        "/common_report_configs/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_input"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "update"
                ],
                "description": "This operation updates a common report configuration based on the\nUUID and intentful spec.\n",
                "x-ntnx-kind": "common_report_config",
                "summary": "Update common report config."
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-doc-hide": true,
                "summary": "Get common report config information.",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "common_report_config",
                "description": "This operation retrieves a common report configuration based on the\nUUID.\n"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-doc-hide": true,
                "summary": "Delete common report config.",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "common_report_config",
                "description": "This operation submits a request to delete a common report\nconfiguration based on the UUID.\n"
            }
        },
        "/containers": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/container_intent_input"
                        }
                    }
                ],
                "tags": [
                    "containers"
                ],
                "x-doc-hide": true,
                "summary": "Create a Container",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "container",
                "description": "This operation submits a request to create a Container based on the input parameters.\n"
            }
        },
        "/containers/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/container_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/container_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "containers"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of Containers",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "container",
                "description": "This operation gets a list of Containers, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n"
            }
        },
        "/containers/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Intent Spec for Container.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/container_intent_input"
                        }
                    }
                ],
                "tags": [
                    "containers"
                ],
                "x-doc-hide": true,
                "summary": "Update a Container",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "container",
                "description": "This operation submits a request to update a Container based on the input parameters.\nOnly state change of container is allowed.\n"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "containers"
                ],
                "x-doc-hide": true,
                "summary": "Get a Container",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "container",
                "description": "This operation gets a Container."
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "containers"
                ],
                "x-doc-hide": true,
                "summary": "Delete a Container",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "container",
                "description": "This operation submits a request to delete a Container."
            }
        },
        "/datacenters": {
            "post": {
                "description": "Create a datacenter instance",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Create datacenter object",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_input"
                        }
                    }
                ],
                "tags": [
                    "datacenter"
                ],
                "x-doc-hide": true,
                "summary": "Create a datacenter instance",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "datacenter",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    }
                }
            }
        },
        "/datacenters/list": {
            "post": {
                "description": "Retrieves all datacenters",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/datacenter_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "datacenter"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves all datacenters",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "datacenter",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/datacenter_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    }
                }
            }
        },
        "/datacenters/{uuid}": {
            "put": {
                "description": "Update datacenter",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Update datacenter",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_input"
                        }
                    }
                ],
                "tags": [
                    "datacenter"
                ],
                "x-doc-hide": true,
                "summary": "Update datacenter",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "datacenter",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    }
                }
            },
            "get": {
                "description": "Retrieves specified datacenter",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "datacenter"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves specified datacenter",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "datacenter",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete specified datacenter",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "datacenter"
                ],
                "x-doc-hide": true,
                "summary": "Delete specified datacenter",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "datacenter",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_response"
                        }
                    }
                }
            }
        },
        "/direct_connects/connections": {
            "post": {
                "description": "This operation submits a request to create a direct_connect based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_input"
                        }
                    }
                ],
                "tags": [
                    "direct_connects"
                ],
                "x-doc-hide": true,
                "summary": "Create a direct_connect",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "direct_connect",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_response"
                        }
                    }
                }
            }
        },
        "/direct_connects/connections/list": {
            "post": {
                "description": "This operation gets a list of direct_connects, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "direct_connects"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of direct_connects",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "direct_connect",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    }
                }
            }
        },
        "/direct_connects/connections/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a direct_connect based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_input"
                        }
                    }
                ],
                "tags": [
                    "direct_connects"
                ],
                "x-doc-hide": true,
                "summary": "Update a direct_connect",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "direct_connect",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "This operation gets a direct_connect.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "direct_connects"
                ],
                "x-doc-hide": true,
                "summary": "Get a direct_connect",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "direct_connect",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "This operation submits a request to delete a direct_connect.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "direct_connects"
                ],
                "x-doc-hide": true,
                "summary": "Delete a direct_connect",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "direct_connect",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_response"
                        }
                    }
                }
            }
        },
        "/direct_connects/ports": {
            "post": {
                "description": "This operation submits a request to create a direct_connect_port based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_intent_input"
                        }
                    }
                ],
                "tags": [
                    "direct_connect_ports"
                ],
                "x-doc-hide": true,
                "summary": "Create a direct_connect_port",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "direct_connect_port",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_intent_response"
                        }
                    }
                }
            }
        },
        "/direct_connects/ports/list": {
            "post": {
                "description": "This operation gets a list of direct_connect_ports, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "direct_connect_ports"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of direct_connect_ports",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "direct_connect_port",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_status"
                        }
                    }
                }
            }
        },
        "/direct_connects/ports/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a direct_connect_port based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_intent_input"
                        }
                    }
                ],
                "tags": [
                    "direct_connect_ports"
                ],
                "x-doc-hide": true,
                "summary": "Update a direct_connect_port",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "direct_connect_port",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "This operation gets a direct_connect_port.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "direct_connect_ports"
                ],
                "x-doc-hide": true,
                "summary": "Get a direct_connect_port",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "direct_connect_port",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "This operation submits a request to delete a direct_connect_port.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "direct_connect_ports"
                ],
                "x-doc-hide": true,
                "summary": "Delete a direct_connect_port",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "direct_connect_port",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_port_status"
                        }
                    },
                    "202": {
                        "description": "Success"
                    }
                }
            }
        },
        "/direct_connects/service_providers": {
            "post": {
                "description": "This operation submits a request to create a direct_connect_service_provider based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_intent_input"
                        }
                    }
                ],
                "tags": [
                    "direct_connect_service_providers"
                ],
                "x-doc-hide": true,
                "summary": "Create a direct_connect_service_provider",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "direct_connect_service_provider",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_intent_response"
                        }
                    }
                }
            }
        },
        "/direct_connects/service_providers/list": {
            "post": {
                "description": "This operation gets a list of direct_connect_service_providers, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "direct_connect_service_providers"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of direct_connect_service_providers",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "direct_connect_service_provider",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_status"
                        }
                    }
                }
            }
        },
        "/direct_connects/service_providers/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a direct_connect_service_provider based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_intent_input"
                        }
                    }
                ],
                "tags": [
                    "direct_connect_service_providers"
                ],
                "x-doc-hide": true,
                "summary": "Update a direct_connect_service_provider",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "direct_connect_service_provider",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "This operation gets a direct_connect_service_provider.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "direct_connect_service_providers"
                ],
                "x-doc-hide": true,
                "summary": "Get a direct_connect_service_provider",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "direct_connect_service_provider",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "This operation submits a request to delete a direct_connect_service_provider.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "direct_connect_service_providers"
                ],
                "x-doc-hide": true,
                "summary": "Delete a direct_connect_service_provider",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "direct_connect_service_provider",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_service_provider_status"
                        }
                    },
                    "202": {
                        "description": "Success"
                    }
                }
            }
        },
        "/direct_connects/virtual_interfaces": {
            "post": {
                "description": "This operation submits a request to create a direct_connect_virtual_interface based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_input"
                        }
                    }
                ],
                "tags": [
                    "direct_connect_virtual_interfaces"
                ],
                "x-doc-hide": true,
                "summary": "Create a direct_connect_virtual_interface",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "direct_connect_virtual_interface",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_response"
                        }
                    }
                }
            }
        },
        "/direct_connects/virtual_interfaces/list": {
            "post": {
                "description": "This operation gets a list of direct_connect_virtual_interfaces, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "direct_connect_virtual_interfaces"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of direct_connect_virtual_interfaces",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "direct_connect_virtual_interface",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    }
                }
            }
        },
        "/direct_connects/virtual_interfaces/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a direct_connect_virtual_interface based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_input"
                        }
                    }
                ],
                "tags": [
                    "direct_connect_virtual_interfaces"
                ],
                "x-doc-hide": true,
                "summary": "Update a direct_connect_virtual_interface",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "direct_connect_virtual_interface",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "This operation gets a direct_connect_virtual_interface.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "direct_connect_virtual_interfaces"
                ],
                "x-doc-hide": true,
                "summary": "Get a direct_connect_virtual_interface",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "direct_connect_virtual_interface",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "This operation submits a request to delete a direct_connect_virtual_interface.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "direct_connect_virtual_interfaces"
                ],
                "x-doc-hide": true,
                "summary": "Delete a direct_connect_virtual_interface",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "direct_connect_virtual_interface",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_response"
                        }
                    }
                }
            }
        },
        "/directory_services": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to create a directory service configuration based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_input"
                        }
                    }
                ],
                "tags": [
                    "directory_service"
                ],
                "x-ntnx-operations": [
                    "add"
                ],
                "x-ntnx-kind": "directory_service",
                "summary": "Create a directory service configuration"
            }
        },
        "/directory_services/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/directory_service_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                },
                "description": "This operation gets a list of directory service configurations, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/directory_service_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "directory_service"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "directory_service",
                "summary": "Get a list of directory service configurations"
            }
        },
        "/directory_services/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                },
                "description": "This operation submits a request to update a directory service configuration based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_input"
                        }
                    }
                ],
                "tags": [
                    "directory_service"
                ],
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "directory_service",
                "summary": "Update a directory service configuration"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                },
                "description": "This operation gets a directory service configuration.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "directory_service"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "directory_service",
                "summary": "Get a directory service configuration"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                },
                "description": "This operation submits a request to delete a directory service configuration.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "directory_service"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "directory_service",
                "summary": "Delete a directory service configuration"
            }
        },
        "/directory_services/{uuid}/search": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/directory_service_search_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                },
                "description": "Retrieves a user or a group available in the directory service based on\nthe UUID specified.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/directory_service_search_metadata"
                        }
                    }
                ],
                "tags": [
                    "directory_service"
                ],
                "x-ntnx-operations": [
                    "search"
                ],
                "x-ntnx-kind": "directory_service",
                "summary": "Search user or group in the directory service."
            }
        },
        "/disks/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/disk_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/disk_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/disk_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "disks"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of Disks",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "disk",
                "description": "This operation gets a list of Disks, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n"
            }
        },
        "/disks/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/disk_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/disk_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "disks"
                ],
                "x-doc-hide": true,
                "summary": "Get a Disk",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "disk",
                "description": "This operation gets a Disk."
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/disk_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/disk_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "disks"
                ],
                "x-doc-hide": true,
                "summary": "Delete a Disk",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "disk",
                "description": "This operation submits a request to delete a Disk."
            }
        },
        "/docker_registries": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Docker registry spec",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_input"
                        }
                    }
                ],
                "tags": [
                    "docker_registry"
                ],
                "x-doc-hide": true,
                "summary": "Create a docker registry",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "docker_registry",
                "description": "Create a docker registry"
            }
        },
        "/docker_registries/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "docker_registry"
                ],
                "x-doc-hide": true,
                "summary": "List all docker registries",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "docker_registry",
                "description": "List all docker registries"
            }
        },
        "/docker_registries/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Docker registry spec",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_input"
                        }
                    }
                ],
                "tags": [
                    "docker_registry"
                ],
                "x-doc-hide": true,
                "summary": "Update a docker registry",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "docker_registry",
                "description": "Update a docker registry"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    },
                    "default": {
                        "description": "Failed to retrieve docker registry",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "docker_registry"
                ],
                "x-doc-hide": true,
                "summary": "Retrieve a Docker registry",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "docker_registry",
                "description": "Retrieve a docker registry"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "docker_registry"
                ],
                "x-doc-hide": true,
                "summary": "Deletes a Docker registry",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "docker_registry",
                "description": "Deletes a Docker registry"
            }
        },
        "/docker_registries/{uuid}/search/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error"
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search_list_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search_list_intent_response"
                        }
                    }
                ],
                "tags": [
                    "docker_registry"
                ],
                "x-doc-hide": true,
                "summary": "Searches docker containers for specified registry",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "docker_image",
                "description": "Searches docker containers for specified registry"
            }
        },
        "/environments": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded",
                        "schema": {
                            "$ref": "#/definitions/environment_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/environment_intent_input"
                        }
                    }
                ],
                "tags": [
                    "environment"
                ],
                "x-doc-hide": true,
                "summary": "Create Environment",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "environment",
                "description": "Given a spec creates a Environment with associated metadata\n"
            }
        },
        "/environments/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded",
                        "schema": {
                            "$ref": "#/definitions/environment_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/environment_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "environment"
                ],
                "x-doc-hide": true,
                "summary": "List the Environment",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "environment",
                "description": "List the Environment with associated metadata"
            }
        },
        "/environments/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded",
                        "schema": {
                            "$ref": "#/definitions/environment_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "required": true,
                        "type": "string",
                        "description": "uuid of environment to be updated"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/environment_intent_input"
                        }
                    }
                ],
                "tags": [
                    "environment"
                ],
                "x-doc-hide": true,
                "summary": "Update Environment",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "environment",
                "description": "Given a spec and Environment UUID, update Environment\n"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/environment_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "required": true,
                        "type": "string",
                        "description": "uuid of Environment to get"
                    }
                ],
                "tags": [
                    "environment"
                ],
                "x-doc-hide": true,
                "summary": "Get Environment",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "environment",
                "description": "Given a UUID, returns a Environment definition"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded",
                        "schema": {
                            "$ref": "#/definitions/environment_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID Provided",
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "required": true,
                        "type": "string",
                        "description": "uuid of the environment to be deleted"
                    }
                ],
                "tags": [
                    "environment"
                ],
                "x-doc-hide": true,
                "summary": "Delete Environment",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "environment",
                "description": "Delete a Environment given its UUID"
            }
        },
        "/events": {
            "post": {
                "summary": "Proxies events request to nusights Db API server.",
                "x-doc-hide": true,
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                ],
                "description": "Input data is validated by REST layer in nusights DB server,this is a\n  passthrough.\n"
            }
        },
        "/fanout_proxy": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "type": "string",
                        "description": "One of the availability zones name of Xi portal.",
                        "name": "az_name"
                    },
                    {
                        "description": "One of the availability zones uuid of Xi portal.",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "in": "query",
                        "type": "string",
                        "name": "az_physical_uuid"
                    },
                    {
                        "description": "Cluster uuid of remote PC or PE cluster.",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "in": "query",
                        "type": "string",
                        "name": "remote_cluster_uuid"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "description": "HTTP method to call",
                        "in": "query",
                        "name": "method"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "description": "URL path to call on remote cluster",
                        "in": "query",
                        "name": "url_path"
                    },
                    {
                        "in": "query",
                        "type": "string",
                        "description": "content type for the call",
                        "name": "content_type"
                    },
                    {
                        "in": "query",
                        "type": "string",
                        "description": "entity kind e.g. vm, network",
                        "name": "kind"
                    },
                    {
                        "description": "The UUID of the entity.",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "in": "query",
                        "type": "string",
                        "name": "entity_uuid"
                    },
                    {
                        "description": "The UUID of the tenant.",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "in": "query",
                        "type": "string",
                        "name": "tenant_uuid"
                    },
                    {
                        "in": "body",
                        "name": "fanout_proxy_body",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                ],
                "tags": [
                    "remote_connections"
                ],
                "description": "Proxies request to remote cluster, uses remote connection\nto call endpoint on remote cluster.\n",
                "x-doc-hide": true,
                "summary": "Proxies request to remote cluster"
            }
        },
        "/file_store": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_response"
                        }
                    }
                },
                "description": "File items are binaries and unlike images are not limited by the file type (e.g ISOs, or disk images).",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_input"
                        }
                    }
                ],
                "tags": [
                    "file_store"
                ],
                "x-ntnx-kind": "file_item",
                "x-doc-hide": true,
                "summary": "Create a file_item"
            }
        },
        "/file_store/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/file_item_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }
                },
                "description": "This operation gets a list of file_items, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/file_item_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "file_store"
                ],
                "x-ntnx-kind": "file_item",
                "x-doc-hide": true,
                "summary": "Get a list of file_items"
            }
        },
        "/file_store/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to update a file_item based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_input"
                        }
                    }
                ],
                "tags": [
                    "file_store"
                ],
                "x-ntnx-kind": "file_item",
                "x-doc-hide": true,
                "summary": "Update a file_item"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }
                },
                "description": "This operation gets a file_item.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "file_store"
                ],
                "x-ntnx-kind": "file_item",
                "x-doc-hide": true,
                "summary": "Get a file_item"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to delete a file_item.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "file_store"
                ],
                "x-ntnx-kind": "file_item",
                "x-doc-hide": true,
                "summary": "Delete a file_item"
            }
        },
        "/file_store/{uuid}/file": {
            "put": {
                "description": "Upload the binary bits for a file item.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "file_item",
                        "schema": {
                            "format": "binary"
                        }
                    }
                ],
                "tags": [
                    "file_store"
                ],
                "x-doc-hide": true,
                "summary": "Upload file item contents",
                "x-ntnx-kind": "file_item",
                "consumes": [
                    "application/octet-stream"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }
                }
            },
            "get": {
                "description": "Download the raw binary bits associated with a file item.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "file_store"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "x-doc-hide": true,
                "summary": "Get file item Contents",
                "x-ntnx-kind": "file_item",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string",
                            "format": "binary"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }
                }
            }
        },
        "/floating_ips": {
            "post": {
                "description": "This operation submits a request to create a Floating IP based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_input"
                        }
                    }
                ],
                "tags": [
                    "floating_ip"
                ],
                "x-doc-hide": true,
                "summary": "Create a Floating IP",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "floating_ip",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_response"
                        }
                    }
                }
            }
        },
        "/floating_ips/list": {
            "post": {
                "description": "This operation gets a list of Floating IPs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "floating_ip"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of Floating IPs",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "floating_ip",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }
                }
            }
        },
        "/floating_ips/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a Floating IP based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_input"
                        }
                    }
                ],
                "tags": [
                    "floating_ip"
                ],
                "x-doc-hide": true,
                "summary": "Update a Floating IP",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "floating_ip",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }
                }
            },
            "get": {
                "description": "This operation gets a Floating IP.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "floating_ip"
                ],
                "x-doc-hide": true,
                "summary": "Get a Floating IP",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "floating_ip",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "This operation submits a request to delete a Floating IP.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "floating_ip"
                ],
                "x-doc-hide": true,
                "summary": "Delete a Floating IP",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "floating_ip",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }
                }
            }
        },
        "/gcp/v1/accounts/{account_uuid}/zone/{zone_name}/instances/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "required": true,
                        "type": "string",
                        "description": "uuid of gcp instance"
                    },
                    {
                        "in": "path",
                        "name": "account_uuid",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "required": true,
                        "type": "string",
                        "description": "uuid of account"
                    },
                    {
                        "description": "zone name for gcp account",
                        "required": true,
                        "type": "string",
                        "name": "zone_name",
                        "in": "path"
                    }
                ],
                "tags": [
                    "gcp/instances"
                ],
                "x-doc-hide": true,
                "summary": "Get gcp vm",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_instance",
                "description": "Given a UUID, returns a gcp vm"
            }
        },
        "/gcp/v1/disk_types/list": {
            "post": {
                "description": "List all disk types present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/disk_types"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud disk types",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_disk_type",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/firewalls/list": {
            "post": {
                "description": "List all firewalls available for a project. Supported filters are:\n- account_uuid\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/firewalls"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud firewalls",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_firewall",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/images/list": {
            "post": {
                "description": "List all images available for a GCP account. Supported filters are:\n- account_uuid\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/images"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud images",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_image",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/instances/list": {
            "post": {
                "description": "List all VM's present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/instances"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud vm instances",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_instance",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/machine_types/list": {
            "post": {
                "description": "List all machine types present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/machine_types"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud machine types",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_machine_type",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/networks/list": {
            "post": {
                "description": "List all network interfaces present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/networks"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud networks",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_network",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/persistent_disks/list": {
            "post": {
                "description": "List all persistent disks present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/persistent_disks"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud persistent disks",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_persistent_disk",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/regions/list": {
            "post": {
                "description": "List all regions present available for a GCP account. Supported filters are:\n- account_uuid\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/regions"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud regions",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_region",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/snapshots/list": {
            "post": {
                "description": "List all snapshots available for a GCP account. Supported filters are:\n- account_uuid\n- zone\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/snapshots"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud snapshots",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_snapshot",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/subnetworks/list": {
            "post": {
                "description": "List all subnetworks available for a GCP account. Supported filters are:\n- account_uuid\n- zone\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/subnetworks"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud subnetworks",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_subnetwork",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gcp/v1/zones/list": {
            "post": {
                "description": "List all zones available for a GCP account. Supported filters are:\n- account_uuid\n",
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "gcp/zones"
                ],
                "x-doc-hide": true,
                "summary": "Get Google cloud zones",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "gcp_zone",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "GCP resources response body",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/graphql": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Failed to process requests.",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    },
                    "200": {
                        "description": "Requests processed successfully.",
                        "schema": {
                            "$ref": "#/definitions/graphql_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Graphql query to execute.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/graphql_query"
                        }
                    }
                ],
                "tags": [
                    "graphql"
                ],
                "description": "Execute graphql query and return the data.\n",
                "x-doc-hide": true,
                "summary": "Execute graphql queries."
            }
        },
        "/groups": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/groups_get_entities_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/groups_get_entities_request"
                        }
                    }
                ],
                "tags": [
                    "groups"
                ],
                "description": "Get entities from entity db.",
                "x-doc-hide": true,
                "summary": "Get Entities."
            }
        },
        "/hosts/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/host_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/host_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "hosts"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "This operation gets a list of Hosts, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "x-ntnx-kind": "host",
                "summary": "Get a list of Hosts"
            }
        },
        "/hosts/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/host_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Intent Spec of Host.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/host_intent_input"
                        }
                    }
                ],
                "tags": [
                    "hosts"
                ],
                "x-doc-hide": true,
                "summary": "Update a Host",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "host",
                "description": "This operation submits a request to update a Host based on the input parameters.\n"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/host_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "hosts"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "This operation gets a Host.",
                "x-ntnx-kind": "host",
                "summary": "Get a Host"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/host_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "hosts"
                ],
                "x-doc-hide": true,
                "summary": "Delete a Host",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "host",
                "description": "This operation submits a request to delete a Host."
            }
        },
        "/hosts/{uuid}/run_ipmi_cmd": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/host_ipmi_cmd_result"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "The arguments for the IPMI tool as a single string",
                        "name": "ipmi_args",
                        "schema": {
                            "$ref": "#/definitions/host_ipmi_args"
                        }
                    }
                ],
                "tags": [
                    "ipmi_cmd"
                ],
                "x-doc-hide": true,
                "summary": "Run IPMI command on the given host",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "host",
                "description": "Run IPMI command on the given host"
            }
        },
        "/idempotence_identifiers": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": false,
                        "in": "body",
                        "description": "An idempotence identifier object.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_input"
                        }
                    }
                ],
                "tags": [
                    "idempotence_identifiers"
                ],
                "description": "The idempotence_identifiers API allows users to generate an idempotent UUID with a user-provided identifier. The idempotent UUIDs can later be passed in POST requests. By default, Nutanix v3 APIs do not allow for operations to be created with user-provided UUIDs; each POST request received by the API gateway results in a UUID4 being automatically generated and returned in the response JSON.\n",
                "x-doc-hide": true,
                "summary": "Creates an idempotence identifier"
            }
        },
        "/idempotence_identifiers/salted": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/identifier_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error"
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/identifier_input"
                        }
                    }
                ],
                "tags": [
                    "idempotence_identifiers"
                ],
                "description": "This internal API generates idempotent UUID(s)\nfor a given name(s).\n",
                "x-doc-hide": true,
                "summary": "Generates idempotence identifiers(UUID5) for a given name."
            }
        },
        "/idempotence_identifiers/{client_identifier}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "client_identifier",
                        "in": "path"
                    }
                ],
                "tags": [
                    "idempotence_identifiers"
                ],
                "description": "Get an idempotence identifier object.",
                "x-doc-hide": true,
                "summary": "Get an idempotence identifier object."
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "client_identifier",
                        "in": "path"
                    }
                ],
                "tags": [
                    "idempotence_identifiers"
                ],
                "description": "Deletes an idempotence identifier object.",
                "x-doc-hide": true,
                "summary": "Deletes an idempotence identifier object."
            }
        },
        "/identity_providers": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to create a identity_provider based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_input"
                        }
                    }
                ],
                "tags": [
                    "identity_providers"
                ],
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "identity_provider",
                "summary": "Create a identity_provider"
            }
        },
        "/identity_providers/callback": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                },
                "description": "Assertion consumer service url to which the SAML assertion is posted.\n",
                "parameters": [
                    {
                        "required": false,
                        "type": "string",
                        "name": "saml_response",
                        "in": "formData"
                    }
                ],
                "tags": [
                    "identity_providers"
                ],
                "x-ntnx-kind": "identity_provider",
                "x-doc-hide": true,
                "summary": "Endpoint which will be called from the identity provider."
            }
        },
        "/identity_providers/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                },
                "description": "This operation gets a list of identity_provider, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "identity_providers"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "identity_provider",
                "summary": "Get a list of identity_provider"
            }
        },
        "/identity_providers/redirect_list": {
            "post": {
                "description": "This operation gets a list of identity_provider, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "identity_providers"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of identity_provider",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "identity_provider",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                }
            }
        },
        "/identity_providers/sp_metadata": {
            "get": {
                "description": "Endpoint which will give service provider metadata as output\n",
                "x-ntnx-kind": "identity_provider",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "format": "binary"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                },
                "tags": [
                    "identity_providers"
                ],
                "summary": "Endpoint which will give service provider metadata as output"
            }
        },
        "/identity_providers/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                },
                "description": "This operation submits a request to update a identity_provider based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_input"
                        }
                    }
                ],
                "tags": [
                    "identity_providers"
                ],
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "identity_provider",
                "summary": "Update a identity_provider"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                },
                "description": "This operation gets a identity_provider.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "identity_providers"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "identity_provider",
                "summary": "Get a identity_provider"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted"
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                },
                "description": "This operation submits a request to delete a identity_provider.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "identity_providers"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "identity_provider",
                "summary": "Delete a identity_provider"
            }
        },
        "/images": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/image_intent_response"
                        }
                    }
                },
                "description": "Images are raw ISO, QCOW2, or VMDK files that are uploaded by a user can be attached to a VM. An ISO image is attached as a virtual CD-ROM drive, and QCOW2 and VMDK files are attached as SCSI disks. An image has to be explicitly added to the self-service catalog before users can create VMs from it.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/image_intent_input"
                        }
                    }
                ],
                "tags": [
                    "images"
                ],
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "image",
                "summary": "Create a IMAGE"
            }
        },
        "/images/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/image_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }
                },
                "description": "This operation gets a list of IMAGEs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/image_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "images"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "image",
                "summary": "Get a list of IMAGEs"
            }
        },
        "/images/migrate": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/procedural_error_response"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }
                },
                "description": "Submits a request to create a task handling image migration operation, returns a task reference. This moves ownership of images from the PE cluster to PC. Image uuids can be obtained by querying the PE instance to list images on the PE. In the case where image uuid list is provided as empty, all images on the cluster that are not currently migrated to PC will be migrated to PC.\n",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/image_migrate_input"
                        }
                    }
                ],
                "tags": [
                    "images"
                ],
                "x-ntnx-operations": [
                    "migrate"
                ],
                "x-ntnx-kind": "image",
                "summary": "Migrate images from PE cluster to PC"
            }
        },
        "/images/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/image_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to update a IMAGE based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/image_intent_input"
                        }
                    }
                ],
                "tags": [
                    "images"
                ],
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "image",
                "summary": "Update a IMAGE"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/image_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }
                },
                "description": "This operation gets a IMAGE.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "images"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "image",
                "summary": "Get a IMAGE"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/image_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to delete a IMAGE.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "images"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "image",
                "summary": "Delete a IMAGE"
            }
        },
        "/images/{uuid}/file": {
            "put": {
                "description": "Upload the binary bits of an image based on the UUID specified. Note that the image must be created first before an upload can be done. Also, once the image has been uploaded the image cannot be changed.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "image",
                        "schema": {
                            "format": "binary"
                        }
                    },
                    {
                        "description": "Checksum type (e.g SHA_1, SHA_256).",
                        "enum": [
                            "SHA_1",
                            "SHA_256"
                        ],
                        "type": "string",
                        "name": "X-Nutanix-Checksum-Type",
                        "in": "header"
                    },
                    {
                        "description": "Checksum bytes.",
                        "type": "string",
                        "name": "X-Nutanix-Checksum-Bytes",
                        "in": "header"
                    }
                ],
                "tags": [
                    "images"
                ],
                "summary": "Upload Image Contents",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "image",
                "consumes": [
                    "application/octet-stream"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }
                }
            },
            "get": {
                "description": "Downloads the image based on the UUID specified.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "images"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "summary": "Get Image Contents",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "image",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string",
                            "format": "binary"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }
                }
            }
        },
        "/legacy_vm_host_affinity_compatibility": {
            "get": {
                "summary": "Gets the current state of compatibility with legacy rules.",
                "x-doc-hide": true,
                "responses": {
                    "200": {
                        "description": "JSON which describes the legacy affinities of every applicable VM.\n",
                        "schema": {
                            "items": {
                                "type": "object",
                                "properties": {
                                    "cluster": {
                                        "type": "string",
                                        "description": "UUID of the VMs parent cluster."
                                    },
                                    "hosts": {
                                        "items": {
                                            "type": "string",
                                            "description": "UUID of a Host."
                                        },
                                        "type": "array",
                                        "description": "Hosts that the VM is currently affined to."
                                    },
                                    "uuid": {
                                        "type": "string",
                                        "description": "UUID of the VM."
                                    }
                                }
                            },
                            "type": "array"
                        }
                    }
                },
                "description": "Every VM in the cluster is checked to see if the legacy affinities are all accounted for by the defined category based affinity policies. All VMs for which this is not the case are returned along with the list of legacy affinities that remain unaccounted for.\n"
            }
        },
        "/logout": {
            "get": {
                "x-ntnx-kind": "user",
                "summary": "Logs out the current user",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/logout_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error"
                    }
                },
                "tags": [
                    "users"
                ],
                "description": "Logs out the current user."
            }
        },
        "/marketplace_items": {
            "post": {
                "description": "This operation submits a request to create a marketplace item based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_input"
                        }
                    }
                ],
                "tags": [
                    "marketplace_item"
                ],
                "x-doc-hide": true,
                "summary": "Create a marketplace item",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "marketplace_item",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_response"
                        }
                    }
                }
            }
        },
        "/marketplace_items/config": {
            "post": {
                "x-ntnx-permissions": [
                    "marketplace_item.configure"
                ],
                "description": "Enable or disable the Nutanix apps in the marketplace",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_config"
                        }
                    }
                ],
                "tags": [
                    "marketplace_item"
                ],
                "x-doc-hide": true,
                "summary": "Enable or disable the Nutanix apps in the marketplace",
                "x-ntnx-operations": [
                    "config"
                ],
                "x-ntnx-kind": "marketplace_item",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            },
            "get": {
                "x-ntnx-permissions": [
                    "marketplace_item.view"
                ],
                "description": "Retrieve configuration for whether Nutanix apps have been enabled\nor disabled\n",
                "tags": [
                    "marketplace_item"
                ],
                "x-doc-hide": true,
                "summary": "Retrieve configuration for Nutanix apps",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "marketplace_item",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_config"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            }
        },
        "/marketplace_items/list": {
            "post": {
                "description": "This operation gets a list of marketplace items, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "marketplace_item"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of marketplace items",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "marketplace_item",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            }
        },
        "/marketplace_items/render": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_render_output"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_render_input"
                        }
                    }
                ],
                "tags": [
                    "marketplace_item"
                ],
                "x-doc-hide": true,
                "summary": "Create a Marketplace item from the given input.",
                "x-ntnx-operations": [
                    "render"
                ],
                "x-ntnx-kind": "marketplace_item",
                "description": "Helper that translates the given input spec into the equivalent Marketplace item. This is then persisted in the system. NOTE, the result of this operation is the uuid of the created marketplace item.\n"
            }
        },
        "/marketplace_items/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a marketplace item based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_input"
                        }
                    }
                ],
                "tags": [
                    "marketplace_item"
                ],
                "x-doc-hide": true,
                "summary": "Update a marketplace item",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "marketplace_item",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            },
            "get": {
                "description": "This operation gets a marketplace item.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "marketplace_item"
                ],
                "x-doc-hide": true,
                "summary": "Get a marketplace item",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "marketplace_item",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "This operation submits a request to delete a marketplace item.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "marketplace_item"
                ],
                "x-doc-hide": true,
                "summary": "Delete a marketplace item",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "marketplace_item",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            }
        },
        "/metrics/{api}": {
            "post": {
                "summary": "Proxies metrics request to nusights Db API server.",
                "x-doc-hide": true,
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "The API type for nusights Db API server",
                        "in": "path",
                        "maxLength": 64,
                        "required": true,
                        "type": "string",
                        "name": "api"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                ],
                "description": "Input data is validated by REST layer in nusights DB server,this is a\n passthrough.\n"
            }
        },
        "/network_devices": {
            "post": {
                "description": "Create a network device instance",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Create network device object",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_input"
                        }
                    }
                ],
                "tags": [
                    "network_device"
                ],
                "x-doc-hide": true,
                "summary": "Create a network device instance",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "network_device",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    }
                }
            }
        },
        "/network_devices/list": {
            "post": {
                "description": "Retrieves all network devices",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/network_device_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "network_device"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves all network devices",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "network_device",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/network_device_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    }
                }
            }
        },
        "/network_devices/{uuid}": {
            "put": {
                "description": "Update a network device",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Update network device",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_input"
                        }
                    }
                ],
                "tags": [
                    "network_device"
                ],
                "x-doc-hide": true,
                "summary": "Update network device",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "network_device",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    }
                }
            },
            "get": {
                "description": "Retrieves specified network device",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "network_device"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves specified network device",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "network_device",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete specified network device",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "network_device"
                ],
                "x-doc-hide": true,
                "summary": "Delete specified network device",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "network_device",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_response"
                        }
                    }
                }
            }
        },
        "/network_function_chains": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_input"
                        }
                    }
                ],
                "tags": [
                    "network_function_chains"
                ],
                "x-ntnx-operations": [
                    "create"
                ],
                "description": "Given an intentful spec, creates a network function chain with associated metadata.\n",
                "x-ntnx-kind": "network_function_chain",
                "summary": "Create a Network Function Chain"
            }
        },
        "/network_function_chains/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "network_function_chains"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "This operation gets a list of Network Function Chains, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "x-ntnx-kind": "network_function_chain",
                "summary": "Get a list of Network Function Chains"
            }
        },
        "/network_function_chains/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_input"
                        }
                    }
                ],
                "tags": [
                    "network_function_chains"
                ],
                "x-ntnx-operations": [
                    "update"
                ],
                "description": "Given an intenful spec and uuid, update network function chain.\n",
                "x-ntnx-kind": "network_function_chain",
                "summary": "Update a Network Function Chain"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "network_function_chains"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "Given a UUID, returns a network_function_chain definition.",
                "x-ntnx-kind": "network_function_chain",
                "summary": "Get a Network Function Chain"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "network_function_chains"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "description": "Delete a network function chain given its uuid.",
                "x-ntnx-kind": "network_function_chain",
                "summary": "Delete a Network Function Chain"
            }
        },
        "/network_security_rules": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_input"
                        }
                    }
                ],
                "tags": [
                    "network_security_rules"
                ],
                "description": "This operation submits a request to create a Network security rule based on the input parameters.\n",
                "x-ntnx-kind": "network_security_rule",
                "summary": "Create a Network security rule"
            }
        },
        "/network_security_rules/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "network_security_rules"
                ],
                "description": "This operation gets a list of Network security rules, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "x-ntnx-kind": "network_security_rule",
                "summary": "Get all network security rules"
            }
        },
        "/network_security_rules/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_input"
                        }
                    }
                ],
                "tags": [
                    "network_security_rules"
                ],
                "description": "This operation submits a request to update a Network security rule based on the input parameters.\n",
                "x-ntnx-kind": "network_security_rule",
                "summary": "Update a Network security rule"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "network_security_rules"
                ],
                "description": "This operation gets a Network security rule.",
                "x-ntnx-kind": "network_security_rule",
                "summary": "Get a Network security rule"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "network_security_rules"
                ],
                "description": "This operation submits a request to delete a Network security rule.",
                "x-ntnx-kind": "network_security_rule",
                "summary": "Delete a Network security rule"
            }
        },
        "/oauth/authorize": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    },
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        },
                        "description": "authorization grant is provided in callback url callback url\nis in format {redirect_uri}/?code={grant_code}&state={state}\n"
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "description": "Your client ID",
                        "in": "formData",
                        "name": "client_id"
                    },
                    {
                        "in": "formData",
                        "type": "string",
                        "description": "Whitespace-separated list of scopes you application needs",
                        "name": "scope"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "description": "Must be 'code'",
                        "in": "formData",
                        "name": "response_type"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "description": "Must be 'yes' or 'no'",
                        "in": "formData",
                        "name": "confirm"
                    },
                    {
                        "in": "formData",
                        "type": "string",
                        "description": "This URL is used to provide user authorization if the user accepted\naccess to the application or not\n",
                        "name": "redirect_uri"
                    },
                    {
                        "in": "formData",
                        "type": "string",
                        "description": "state parameter to prevent cross site origin attacks",
                        "name": "state"
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "description": "Authorization confirmation post url",
                "x-doc-hide": true,
                "summary": "Used to get authorization code from server"
            }
        },
        "/oauth/client": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                },
                "description": "Add new Oauth Client",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Oauth client details",
                        "name": "oauth_client",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_input"
                        }
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "x-ntnx-kind": "oauth_client",
                "x-doc-hide": true,
                "summary": "This is used to register new oauth client"
            }
        },
        "/oauth/client/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_list"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                },
                "description": "Retrieves all oauth clients",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "x-ntnx-kind": "oauth_client",
                "x-doc-hide": true,
                "summary": "Retrieves all oauth client"
            }
        },
        "/oauth/client/{client_id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    },
                    "404": {
                        "description": "Client identifier does not exists",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                },
                "description": "Update Oauth client information",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "client_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Oauth client details",
                        "name": "oauth_client",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_input"
                        }
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "x-ntnx-kind": "oauth_client",
                "x-doc-hide": true,
                "summary": "Used to update existing client details"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    },
                    "404": {
                        "description": "Client identifier does not exists",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                },
                "description": "Get Oauth client information",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "client_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "x-ntnx-kind": "oauth_client",
                "x-doc-hide": true,
                "summary": "Used to fetch existing oauth client details"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    },
                    "404": {
                        "description": "Client identifier does not exists",
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                },
                "description": "Delete existing Oauth client information",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "client_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "x-ntnx-kind": "oauth_client",
                "x-doc-hide": true,
                "summary": "Delete an existing Oauth client"
            }
        },
        "/oauth/generate_token": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/oauth_generate_token_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }
                },
                "description": "Generates an oauth token",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "oauth_generate_token_request",
                        "schema": {
                            "$ref": "#/definitions/oauth_generate_token_request"
                        }
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "x-ntnx-kind": "oauth_token",
                "x-doc-hide": true,
                "summary": "This is used when the user is already authenticated and would like to\ncreate bearer tokens for distribution\n"
            }
        },
        "/oauth/idp_callback": {
            "get": {
                "responses": {
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        },
                        "description": "Redirect to SSP UI."
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "description": "Oauth2 callback from IDP to intent gateway",
                "x-doc-hide": true,
                "summary": "Oauth2 callback from IDP to intent gateway"
            }
        },
        "/oauth/idp_login": {
            "get": {
                "description": "Oauth2",
                "tags": [
                    "oauth"
                ],
                "x-doc-hide": true,
                "responses": {
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        },
                        "description": "Redirect to IDP Login Page"
                    }
                },
                "summary": "Oauth2 login to idp"
            }
        },
        "/oauth/revoke_token": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }
                },
                "description": "Revokes an oauth token",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "name": "token_type_hint",
                        "in": "query",
                        "default": "access_token",
                        "x-ntnx-enum": [
                            "access_token",
                            "refresh_token"
                        ],
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "x-ntnx-kind": "oauth_token",
                "x-doc-hide": true,
                "summary": "Revoke a token will cause the token to be removed from system\nAny subsequent authorization calls with the token will fail\n"
            }
        },
        "/oauth/token": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/provider_oauth_token"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    },
                    "401": {
                        "description": "Authentication Failure",
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "description": "Must be authorization_code or refresh_token",
                        "in": "formData",
                        "name": "grant_type"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "description": "Your client ID",
                        "in": "formData",
                        "name": "client_id"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "description": "Your client secret",
                        "in": "formData",
                        "name": "client_secret"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "description": "authorization_code received in redirect_uri\nmust for grant_type = authorization_code\n",
                        "in": "formData",
                        "name": "code"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "description": "refresh_token received with previous token\nmust for grant_type = refresh_token\n",
                        "in": "formData",
                        "name": "refresh_token"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "description": "state parameter to prevent cross site origin attacks\nuse only if passed in getting authorization\n",
                        "in": "formData",
                        "name": "state"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "description": "redirect uri used to get authorization\nmust for grant_type = authorization_code\n",
                        "in": "formData",
                        "name": "redirect_uri"
                    }
                ],
                "tags": [
                    "oauth"
                ],
                "description": "Returns an access token",
                "x-doc-hide": true,
                "summary": "This callback is used to get token from Oauth2 provider"
            }
        },
        "/permissions": {
            "post": {
                "description": "\"Permissions define what a user can do with each type. For example,\nan admin can upload images; a DevOps user can create, edit, or delete\na VM; and an operations user can view a VM console.\"\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/permission_intent_input"
                        }
                    }
                ],
                "tags": [
                    "permission"
                ],
                "x-doc-hide": true,
                "summary": "Create a permission.",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "permission",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/permission_intent_response"
                        }
                    }
                }
            }
        },
        "/permissions/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/permission_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }
                },
                "description": "Get permissions.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/permission_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "permission"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "permission",
                "summary": "List the permissions."
            }
        },
        "/permissions/{uuid}": {
            "put": {
                "description": "Update a permission.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/permission_intent_input"
                        }
                    }
                ],
                "tags": [
                    "permission"
                ],
                "x-doc-hide": true,
                "summary": "Update a permission.",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "permission",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/permission_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }
                }
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/permission_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }
                },
                "description": "Get a permission.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "permission"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "permission",
                "summary": "Get a permission."
            },
            "delete": {
                "description": "Delete a permission.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "permission"
                ],
                "x-doc-hide": true,
                "summary": "Delete a permission.",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "permission",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/permission_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }
                }
            }
        },
        "/portal_services/software/{software_type}/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/software_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/software_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "software_type",
                        "in": "path",
                        "x-ntnx-enum": [
                            "NOS",
                            "PRISM_CENTRAL"
                        ],
                        "required": true,
                        "type": "string",
                        "description": "Software type"
                    },
                    {
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/software_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "portal_services"
                ],
                "description": "Get a list of portal software with specified type",
                "x-doc-hide": true,
                "summary": "Get all available software on Nutanix Portal"
            }
        },
        "/portal_services/software/{software_type}/{version}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/portal_software"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/software_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "software_type",
                        "in": "path",
                        "x-ntnx-enum": [
                            "NOS",
                            "PRISM_CENTRAL"
                        ],
                        "required": true,
                        "type": "string",
                        "description": "Software type"
                    },
                    {
                        "description": "Software version",
                        "required": true,
                        "type": "string",
                        "name": "version",
                        "in": "path"
                    }
                ],
                "tags": [
                    "portal_services"
                ],
                "description": "Get the software info with specified type and version",
                "x-doc-hide": true,
                "summary": "Get specified software information"
            }
        },
        "/portal_services/support_cases": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/support_case_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/support_case_intent_input"
                        }
                    }
                ],
                "tags": [
                    "portal_services"
                ],
                "x-doc-hide": true,
                "summary": "Create support case.",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "support_case",
                "description": "Given a spec, creates a support case with associated metadata."
            }
        },
        "/portal_services/support_cases/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/support_case_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/support_case_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "portal_services"
                ],
                "x-doc-hide": true,
                "summary": "List support cases.",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "support_case",
                "description": "List of support cases. Supported filters are - - cluster_reference - serial_number\n"
            }
        },
        "/portal_services/support_cases/template/{template_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/support_case_template_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "ID of the screen for which it needs template.",
                        "required": true,
                        "type": "string",
                        "name": "template_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "portal_services"
                ],
                "x-doc-hide": true,
                "summary": "Get screen template from portal.",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "support_case",
                "description": "Given a template ID it fetches that template."
            }
        },
        "/portal_services/support_cases/{case_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/support_case_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "ID of the support case.",
                        "required": true,
                        "type": "string",
                        "name": "case_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "portal_services"
                ],
                "x-doc-hide": true,
                "summary": "Get specified support case.",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "support_case",
                "description": "Returns the support case details for a given support case ID."
            }
        },
        "/prism_central": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Request succeeded.",
                        "schema": {
                            "$ref": "#/definitions/prism_central"
                        }
                    },
                    "default": {
                        "description": "Internal Error.",
                        "schema": {
                            "$ref": "#/definitions/prism_central_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID Provided.",
                        "schema": {
                            "$ref": "#/definitions/prism_central_status"
                        }
                    }
                },
                "tags": [
                    "prism_central"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "This operation gets a Prism Central.",
                "x-ntnx-kind": "prism_central",
                "x-doc-hide": true,
                "summary": "Get a Prism Central"
            }
        },
        "/prism_central/nodes": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/prism_central_nodes_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/prism_central_request_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/prism_central_nodes"
                        }
                    }
                ],
                "tags": [
                    "prism_central"
                ],
                "x-doc-hide": true,
                "summary": "Add a new prism central VM to Prism Central cluster.",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "prism_central",
                "description": "Given an intentful spec, add a new prism central vm to the cluster .\n"
            }
        },
        "/projects": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/project_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to create a Project based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "The entity to create or modify a project.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/project_intent_input"
                        }
                    }
                ],
                "tags": [
                    "project"
                ],
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "project",
                "summary": "Create a Project"
            }
        },
        "/projects/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/project_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }
                },
                "description": "This operation gets a list of Projects, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/project_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "project"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "project",
                "summary": "Get a list of Projects"
            }
        },
        "/projects/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/project_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to update a Project based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "The entity used to create or modify a project.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/project_intent_input"
                        }
                    }
                ],
                "tags": [
                    "project"
                ],
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "project",
                "summary": "Update a Project"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/project_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }
                },
                "description": "This operation gets a Project.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "project"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "project",
                "summary": "Get a Project"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/project_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to delete a Project.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "project"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "project",
                "summary": "Delete a Project"
            }
        },
        "/projects_internal": {
            "post": {
                "description": "This operation submits a request to create a Project based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "The entity to create or modify a project.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_input"
                        }
                    }
                ],
                "tags": [
                    "project"
                ],
                "x-doc-hide": true,
                "summary": "Create a Project",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "project",
                "responses": {
                    "default": {
                        "description": "Internal Error"
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_response"
                        }
                    }
                }
            }
        },
        "/projects_internal/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a Project based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "The entity used to create or modify a project.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_input"
                        }
                    }
                ],
                "tags": [
                    "project"
                ],
                "x-doc-hide": true,
                "summary": "Update a Project",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "project",
                "responses": {
                    "default": {
                        "description": "Internal Error"
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "This operation gets a Project.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "project"
                ],
                "x-doc-hide": true,
                "summary": "Get a Project",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "project",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error"
                    }
                }
            }
        },
        "/public_cidrs": {
            "post": {
                "description": "This operation submits a request to create a public_cidr based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_input"
                        }
                    }
                ],
                "tags": [
                    "public_cidrs"
                ],
                "x-doc-hide": true,
                "summary": "Create a public_cidr",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "public_cidr",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_response"
                        }
                    }
                }
            }
        },
        "/public_cidrs/list": {
            "post": {
                "description": "This operation gets a list of public_cidrs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "public_cidrs"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of public_cidrs",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "public_cidr",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    }
                }
            }
        },
        "/public_cidrs/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a public_cidr based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_input"
                        }
                    }
                ],
                "tags": [
                    "public_cidrs"
                ],
                "x-doc-hide": true,
                "summary": "Update a public_cidr",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "public_cidr",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "This operation gets a public_cidr.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "public_cidrs"
                ],
                "x-doc-hide": true,
                "summary": "Get a public_cidr",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "public_cidr",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "This operation submits a request to delete a public_cidr.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "public_cidrs"
                ],
                "x-doc-hide": true,
                "summary": "Delete a public_cidr",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "public_cidr",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_response"
                        }
                    }
                }
            }
        },
        "/rackable_units/list": {
            "post": {
                "description": "Retrieves all rackable units",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "rackable_unit"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves all rackable units",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "rackable_unit",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_status"
                        }
                    }
                }
            }
        },
        "/rackable_units/{uuid}": {
            "put": {
                "description": "Update rackable unit",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Update rackable unit",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_intent_input"
                        }
                    }
                ],
                "tags": [
                    "rackable_unit"
                ],
                "x-doc-hide": true,
                "summary": "Update rackable unit",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "rackable_unit",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "Retrieves specified rackable unit",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "rackable_unit"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves specified rackable unit",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "rackable_unit",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_status"
                        }
                    }
                }
            }
        },
        "/racks": {
            "post": {
                "description": "Create a rack instance",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Create rack object",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/rack_intent_input"
                        }
                    }
                ],
                "tags": [
                    "rack"
                ],
                "x-doc-hide": true,
                "summary": "Create a rack instance",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "rack",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/rack_intent_response"
                        }
                    }
                }
            }
        },
        "/racks/list": {
            "post": {
                "description": "Retrieves all racks",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/rack_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "rack"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves all racks",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "rack",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/rack_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    }
                }
            }
        },
        "/racks/validate_rack_config": {
            "post": {
                "description": "Check whether given rack configuration in this cluster's context is valid or not. A rack configuration refers to a map of racks to the hosts it contains.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Validate rack configuration",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/validate_rack_config_input"
                        }
                    }
                ],
                "tags": [
                    "rack"
                ],
                "x-doc-hide": true,
                "summary": "Validates Specified Rack Configuration",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "rack",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/validate_rack_config_output"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    }
                }
            }
        },
        "/racks/{uuid}": {
            "put": {
                "description": "Update rack",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Update rack",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/rack_intent_input"
                        }
                    }
                ],
                "tags": [
                    "rack"
                ],
                "x-doc-hide": true,
                "summary": "Update rack",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "rack",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/rack_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "Retrieves specified rack",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "rack"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves specified rack",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "rack",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/rack_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete specified rack",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "rack"
                ],
                "x-doc-hide": true,
                "summary": "Delete specified rack",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "rack",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/rack_intent_response"
                        }
                    }
                }
            }
        },
        "/remote_connections": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_response"
                        }
                    }
                },
                "description": "Creates a remote connection",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Remote connection details",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_input"
                        }
                    }
                ],
                "tags": [
                    "remote_connections"
                ],
                "x-ntnx-kind": "remote_connection",
                "x-doc-hide": true,
                "summary": "Creates a remote connection"
            }
        },
        "/remote_connections/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                },
                "description": "Retrieve list of remote connections",
                "parameters": [
                    {
                        "required": false,
                        "in": "body",
                        "description": "A remote connection object",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "remote_connections"
                ],
                "x-ntnx-kind": "remote_connection",
                "x-doc-hide": true,
                "summary": "Get list of remote connections"
            }
        },
        "/remote_connections/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                },
                "description": "Update remote connection",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "in": "body",
                        "description": "Remote connection details",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_input"
                        }
                    }
                ],
                "tags": [
                    "remote_connections"
                ],
                "x-ntnx-kind": "remote_connection",
                "x-doc-hide": true,
                "summary": "Used to update remote connection details"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                },
                "description": "Get remote connection",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "remote_connections"
                ],
                "x-ntnx-kind": "remote_connection",
                "x-doc-hide": true,
                "summary": "Used to fetch remote connection details"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                },
                "description": "Delete existing remote connection and its information",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "remote_connections"
                ],
                "x-ntnx-kind": "remote_connection",
                "x-doc-hide": true,
                "summary": "Delete an existing remote connection"
            }
        },
        "/remote_rpc_request": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                },
                "description": "Execute Remote RPC",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "RPC payload.",
                        "name": "payload",
                        "schema": {
                            "$ref": "#/definitions/remote_rpc_request_input"
                        }
                    },
                    {
                        "required": true,
                        "type": "string",
                        "description": "Name of the service whose RPC needs to be invoked.",
                        "in": "query",
                        "name": "service_name"
                    },
                    {
                        "required": true,
                        "type": "integer",
                        "description": "Port at which the service is running",
                        "in": "query",
                        "name": "port"
                    },
                    {
                        "required": false,
                        "type": "integer",
                        "description": "timeout in milliseconds.",
                        "in": "query",
                        "name": "timeout_ms"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "description": "base url for rpc call.",
                        "in": "query",
                        "name": "base_url"
                    }
                ],
                "tags": [
                    "remote_connections"
                ],
                "x-doc-hide": true,
                "consumes": [
                    "application/octet-stream"
                ],
                "summary": "Execute Remote RPC"
            }
        },
        "/report_configs": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_input"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "create"
                ],
                "description": "Given an intentful spec, creates a report config with specified attributes.",
                "x-ntnx-kind": "report_config",
                "summary": "Create report config."
            }
        },
        "/report_configs/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/report_config_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/report_config_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "List the report configs with associated metadata.",
                "x-ntnx-kind": "report_config",
                "summary": "List the report configs."
            }
        },
        "/report_configs/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_input"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "update"
                ],
                "description": "Given an intenful spec and report config uuid, update report config.",
                "x-ntnx-kind": "report_config",
                "summary": "Update report config."
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "Given a UUID, returns a report config.",
                "x-ntnx-kind": "report_config",
                "summary": "Get report config information."
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "description": "Delete a report config given its uuid.",
                "x-ntnx-kind": "report_config",
                "summary": "Delete report config."
            }
        },
        "/report_instances": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/report_instance_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "input_body",
                        "schema": {
                            "$ref": "#/definitions/report_instance_intent_input"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "create"
                ],
                "description": "This will generate the report for a specified report config uuid.",
                "x-ntnx-kind": "report_instance",
                "summary": "Create a report instance."
            }
        },
        "/report_instances/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/report_instance_list_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/report_instance_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "Get the list of all the generated report instances.",
                "x-ntnx-kind": "report_instance",
                "summary": "Get the list of all the Generated report instances."
            }
        },
        "/report_instances/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/report_instance_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "Get the specified report instance.",
                "x-ntnx-kind": "report_instance",
                "summary": "Get the specified report instance."
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error"
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/report_instance_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "description": "Delete the generated report instance.",
                "x-ntnx-kind": "report_instance",
                "summary": "Delete the generated report instance."
            }
        },
        "/reports/download/{type}/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "format": "binary"
                        }
                    },
                    "default": {
                        "description": "Internal Error"
                    },
                    "404": {
                        "description": "Invalid UUID provided"
                    }
                },
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "pattern": "(\\breport_instance\\b|\\blogo\\b)",
                        "required": true,
                        "type": "string",
                        "description": "Type of resource to be downloaded. Supported types are.\n  - report_instance\n  - log\n"
                    },
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Download a resource.",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "report_instance",
                "description": "Download a resource."
            }
        },
        "/reports/notify": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/report_notification_spec"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "x-ntnx-operations": [
                    "notify"
                ],
                "description": "Email the specified generated reports to specified recipients.",
                "x-ntnx-kind": "report_instance",
                "summary": "Email the specified generated reports to specified recipients."
            }
        },
        "/reports/upload/{type}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/resource_upload_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error"
                    }
                },
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "pattern": "(\\breport_instance\\b|\\blogo\\b)",
                        "required": true,
                        "type": "string",
                        "description": "Type of the file to be uploaded. Supported types are\n  - logo\n"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "file",
                        "schema": {
                            "format": "binary"
                        }
                    }
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Upload a file.",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "common_report_config",
                "consumes": [
                    "application/octet-stream"
                ],
                "description": "This uploads a file and returns the UUID for the same."
            }
        },
        "/roles": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/role_intent_response"
                        }
                    }
                },
                "description": "\"A role is a collection of permissions defined for one or more kinds.\nA kind represents the type of an entity (such as VM). Roles are\ndefined by users who have permission to create roles and assign roles\nto projects. All users in a project inherit the role.\"\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/role_intent_input"
                        }
                    }
                ],
                "tags": [
                    "roles"
                ],
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "role",
                "summary": "Create a role."
            }
        },
        "/roles/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/role_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }
                },
                "description": "Get roles.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_list_request",
                        "schema": {
                            "$ref": "#/definitions/role_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "roles"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "role",
                "summary": "List the roles."
            }
        },
        "/roles/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/role_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }
                },
                "description": "Update a role.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/role_intent_input"
                        }
                    }
                ],
                "tags": [
                    "roles"
                ],
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "role",
                "summary": "Update a role."
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/role_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }
                },
                "description": "Get a role.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "roles"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "role",
                "summary": "Get a role."
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/role_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }
                },
                "description": "Delete a role.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "roles"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "role",
                "summary": "Delete a role."
            }
        },
        "/search": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/query_result"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "search_request",
                        "schema": {
                            "$ref": "#/definitions/search_request"
                        }
                    }
                ],
                "tags": [
                    "search"
                ],
                "description": "Parse user query and get search information.",
                "x-doc-hide": true,
                "summary": "Get Search Information."
            }
        },
        "/services/microseg": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/service_config_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/microseg_service_config_input"
                        }
                    }
                ],
                "tags": [
                    "services"
                ],
                "description": "Manage Microsegmentation.",
                "x-doc-hide": true,
                "summary": "Manage Microsegmentation."
            }
        },
        "/services/nucalm": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/service_config_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/nucalm_service_config_input"
                        }
                    }
                ],
                "tags": [
                    "services"
                ],
                "description": "Manage NuCalm service.",
                "x-doc-hide": true,
                "summary": "Manage NuCalm service."
            }
        },
        "/services/xfit": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/service_config_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/xfit_service_input"
                        }
                    }
                ],
                "tags": [
                    "services"
                ],
                "description": "Manage xfit service, including enabling the service.",
                "x-doc-hide": true,
                "summary": "Manage xfit service."
            }
        },
        "/services/{service_name}/cluster_capability": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/cluster_capability_status"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "The service name.",
                        "in": "path",
                        "maxLength": 64,
                        "required": true,
                        "type": "string",
                        "name": "service_name"
                    }
                ],
                "tags": [
                    "services"
                ],
                "description": "Cluster feature capability status.",
                "x-doc-hide": true,
                "summary": "Cluster feature status."
            }
        },
        "/services/{service_name}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/service_enablement_status"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "The service name.",
                        "in": "path",
                        "maxLength": 64,
                        "required": true,
                        "type": "string",
                        "name": "service_name"
                    }
                ],
                "tags": [
                    "services"
                ],
                "description": "Service status.",
                "x-doc-hide": true,
                "summary": "Service status."
            }
        },
        "/ssh_user": {
            "post": {
                "description": "Add SSH User to the entity",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Create SSH User object",
                        "name": "ssh_user_intent",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_input"
                        }
                    }
                ],
                "tags": [
                    "ssh_user"
                ],
                "x-doc-hide": true,
                "summary": "Add SSH User to the entity",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "ssh_user",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_response"
                        }
                    }
                }
            }
        },
        "/ssh_user/list": {
            "post": {
                "description": "Retrieves all SSH Users on the cluster",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "ssh_user"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves all SSH Users on the cluster",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "ssh_user",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_list"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    }
                }
            }
        },
        "/ssh_user/{uuid}": {
            "put": {
                "description": "Update SSH User entity",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Update SSH User",
                        "name": "ssh_user_intent",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_input"
                        }
                    }
                ],
                "tags": [
                    "ssh_user"
                ],
                "x-doc-hide": true,
                "summary": "Update SSH User entity",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "ssh_user",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_response"
                        }
                    }
                }
            },
            "get": {
                "description": "Retrieves specified SSH User",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "ssh_user"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves specified SSH User",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "ssh_user",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_details"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "Unregister specified SSH User",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "ssh_user"
                ],
                "x-doc-hide": true,
                "summary": "Unregister specified SSH User",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "ssh_user",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_response"
                        }
                    }
                }
            }
        },
        "/streaming_policies": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_response"
                        }
                    }
                },
                "description": "Create Streaming Policy",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Create Streaming Policy object",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_input"
                        }
                    }
                ],
                "tags": [
                    "streaming_policy"
                ],
                "x-ntnx-kind": "streaming_policy",
                "x-doc-hide": true,
                "summary": "Create Streaming Policy"
            }
        },
        "/streaming_policies/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    }
                },
                "description": "Retrieves all Streaming Policies",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "streaming_policy"
                ],
                "x-ntnx-kind": "streaming_policy",
                "x-doc-hide": true,
                "summary": "Retrieves all Streaming Policies"
            }
        },
        "/streaming_policies/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_response"
                        }
                    }
                },
                "description": "Update Streaming Policy entity",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Update Streaming Policy",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_input"
                        }
                    }
                ],
                "tags": [
                    "streaming_policy"
                ],
                "x-ntnx-kind": "streaming_policy",
                "x-doc-hide": true,
                "summary": "Update Streaming Policy entity"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    }
                },
                "description": "Retrieves specified Streaming Policy",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "streaming_policy"
                ],
                "x-ntnx-kind": "streaming_policy",
                "x-doc-hide": true,
                "summary": "Retrieves specified Streaming Policy"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_response"
                        }
                    }
                },
                "description": "Delete specified Streaming Policy",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "streaming_policy"
                ],
                "x-ntnx-kind": "streaming_policy",
                "x-doc-hide": true,
                "summary": "Delete specified Streaming Policy"
            }
        },
        "/subnets": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to create a subnet based on the input parameters.\nA subnet is a block of IP addresses.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_input"
                        }
                    }
                ],
                "tags": [
                    "subnets"
                ],
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "subnet",
                "summary": "Create a subnet"
            }
        },
        "/subnets/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/subnet_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }
                },
                "description": "This operation gets a list of subnets, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/subnet_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "subnets"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "subnet",
                "summary": "Get a list of subnets"
            }
        },
        "/subnets/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }
                },
                "description": "This operation submits a request to update a subnet based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_input"
                        }
                    }
                ],
                "tags": [
                    "subnets"
                ],
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "subnet",
                "summary": "Update a subnet"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }
                },
                "description": "This operation gets a subnet.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "subnets"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "subnet",
                "summary": "Get a subnet"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }
                },
                "description": "This operation submits a request to delete a subnet.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "subnets"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "subnet",
                "summary": "Delete a subnet"
            }
        },
        "/tasks/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/task_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/task_status"
                        }
                    }
                },
                "description": "This operation gets a list of Tasks, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": false,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/task_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "tasks"
                ],
                "x-ntnx-kind": "task",
                "x-doc-hide": true,
                "summary": "Get a list of Tasks"
            }
        },
        "/tasks/poll": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/task_poll_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/task_status"
                        }
                    }
                },
                "description": "Poll for completion of tasks",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/task_poll_input"
                        }
                    }
                ],
                "tags": [
                    "tasks"
                ],
                "x-ntnx-kind": "task",
                "x-doc-hide": true,
                "summary": "Poll for completion of tasks"
            }
        },
        "/tasks/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/task"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/task_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/task_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "tasks"
                ],
                "description": "This operation gets a Task.",
                "x-ntnx-kind": "task",
                "summary": "Get a Task"
            }
        },
        "/underlay_subnets": {
            "post": {
                "description": "Create a underlay subnet instance",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Create underlay subnet object",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_input"
                        }
                    }
                ],
                "tags": [
                    "underlay_subnet"
                ],
                "x-doc-hide": true,
                "summary": "Create a underlay subnet instance",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "underlay_subnet",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    }
                }
            }
        },
        "/underlay_subnets/list": {
            "post": {
                "description": "Retrieves all underlay subnets",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "underlay_subnet"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves all underlay subnets",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "underlay_subnet",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    }
                }
            }
        },
        "/underlay_subnets/{uuid}": {
            "put": {
                "description": "Update underlay subnet",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Update underlay subnet",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_input"
                        }
                    }
                ],
                "tags": [
                    "underlay_subnet"
                ],
                "x-doc-hide": true,
                "summary": "Update underlay subnet",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "underlay_subnet",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    }
                }
            },
            "get": {
                "description": "Retrieves specified underlay subnet",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "underlay_subnet"
                ],
                "x-doc-hide": true,
                "summary": "Retrieves specified underlay subnet",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "underlay_subnet",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete specified underlay subnet",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "underlay_subnet"
                ],
                "x-doc-hide": true,
                "summary": "Delete specified underlay subnet",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "underlay_subnet",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_response"
                        }
                    }
                }
            }
        },
        "/user_groups": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_response"
                        }
                    }
                },
                "description": "Add a User group to the system.",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_input"
                        }
                    }
                ],
                "tags": [
                    "user_groups"
                ],
                "x-ntnx-operations": [
                    "add"
                ],
                "x-ntnx-kind": "user_group",
                "summary": "Add a User group."
            }
        },
        "/user_groups/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/user_group_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }
                },
                "description": "This operation gets a list of User Groups, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/user_group_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "user_groups"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "user_group",
                "summary": "Get a list of User Groups"
            }
        },
        "/user_groups/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a User Group based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_input"
                        }
                    }
                ],
                "tags": [
                    "user_groups"
                ],
                "x-doc-hide": true,
                "summary": "Update a User Group",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "user_group",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }
                }
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }
                },
                "description": "A user group is a grouping of users either defined locally or in a Directory service.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "user_groups"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "user_group",
                "summary": "Get a User Group"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }
                },
                "description": "This operation submits a request to delete a User Group.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "user_groups"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "user_group",
                "summary": "Delete a User Group"
            }
        },
        "/users": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    }
                },
                "description": "This operation submits a request to create a User based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/user_intent_input"
                        }
                    }
                ],
                "tags": [
                    "users"
                ],
                "x-ntnx-operations": [
                    "add"
                ],
                "x-ntnx-kind": "user",
                "summary": "Create a User"
            }
        },
        "/users/info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/user_info"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                },
                "tags": [
                    "users"
                ],
                "description": "Gets the Access Control Policies attached to a user,\nalongwith other user-specific information.\n",
                "x-ntnx-kind": "user",
                "x-doc-hide": true,
                "summary": "Retrieves the Access control policies and other user data\nfor logged in user.\n"
            }
        },
        "/users/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/user_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                },
                "description": "This operation gets a list of Users, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/user_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "users"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "user",
                "summary": "Get a list of Users"
            }
        },
        "/users/me": {
            "get": {
                "x-ntnx-kind": "user",
                "summary": "Retrieves currently logged in user.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                },
                "tags": [
                    "users"
                ],
                "description": "Displays the user currently logged in."
            }
        },
        "/users/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a User based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/user_intent_input"
                        }
                    }
                ],
                "tags": [
                    "users"
                ],
                "x-doc-hide": true,
                "summary": "Update a User",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "user",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                },
                "description": "This operation gets a User.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "users"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "user",
                "summary": "Get a User"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                },
                "description": "This operation submits a request to delete a User.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "users"
                ],
                "x-ntnx-operations": [
                    "remove"
                ],
                "x-ntnx-kind": "user",
                "summary": "Delete a User"
            }
        },
        "/users/{uuid}/project_usage_summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/user_usage_in_projects"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/resource_domain_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/resource_domain_status"
                        }
                    }
                },
                "description": "Retrieves specified user resource domain information.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "users"
                ],
                "x-ntnx-operations": [
                    "view_project_usage_summary"
                ],
                "x-ntnx-kind": "user",
                "summary": "Retrieves specified user resource domain information."
            }
        },
        "/versions": {
            "get": {
                "description": "A version is the major and minor number of the API.",
                "tags": [
                    "versions"
                ],
                "x-doc-hide": true,
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/versions"
                        }
                    }
                },
                "summary": "Get details on the api version"
            }
        },
        "/virtual_networks": {
            "post": {
                "description": "This operation submits a request to create a virtual network based on the input parameters.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_input"
                        }
                    }
                ],
                "tags": [
                    "virtual_network"
                ],
                "x-doc-hide": true,
                "summary": "Create a virtual network",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "virtual_network",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_response"
                        }
                    }
                }
            }
        },
        "/virtual_networks/list": {
            "post": {
                "description": "This operation gets a list of virtual networks, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "virtual_network"
                ],
                "x-doc-hide": true,
                "summary": "Get a list of virtual networks",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "virtual_network",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }
                }
            }
        },
        "/virtual_networks/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a virtual network based on the input parameters.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_input"
                        }
                    }
                ],
                "tags": [
                    "virtual_network"
                ],
                "x-doc-hide": true,
                "summary": "Update a virtual network",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "virtual_network",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }
                }
            },
            "get": {
                "description": "This operation gets a virtual network.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "virtual_network"
                ],
                "x-doc-hide": true,
                "summary": "Get a virtual network",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "virtual_network",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }
                }
            },
            "delete": {
                "description": "This operation submits a request to delete a virtual network.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "virtual_network"
                ],
                "x-doc-hide": true,
                "summary": "Delete a virtual network",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "virtual_network",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }
                }
            }
        },
        "/vm_recovery_points": {
            "post": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.create"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_input"
                        }
                    }
                ],
                "tags": [
                    "vm_recovery_point"
                ],
                "x-doc-hide": true,
                "summary": "Create kind recovery point",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "vm_recovery_point",
                "description": "Given an intentful spec, creates a recovery point with associated\nmetadata\n"
            }
        },
        "/vm_recovery_points/list": {
            "post": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.view"
                ],
                "description": "Get kind recovery points.",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vm_recovery_point"
                ],
                "x-doc-hide": true,
                "summary": "Get kind recovery points",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vm_recovery_point",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_list_intent_response"
                        }
                    }
                }
            }
        },
        "/vm_recovery_points/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.update"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_input"
                        }
                    }
                ],
                "tags": [
                    "vm_recovery_point"
                ],
                "x-doc-hide": true,
                "summary": "Update kind recovery point",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "vm_recovery_point",
                "description": "Given an intenful spec and recovery point uuid, update kind recovery\npoint.\n"
            },
            "get": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.view"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "vm_recovery_point"
                ],
                "x-doc-hide": true,
                "summary": "Get kind recovery points",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vm_recovery_point",
                "description": "Given a UUID, returns a kind recovery point definition."
            },
            "delete": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.delete"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "vm_recovery_point"
                ],
                "x-doc-hide": true,
                "summary": "Delete kind recovery point",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "vm_recovery_point",
                "description": "Delete a kind recovery point given its uuid."
            }
        },
        "/vm_snapshots": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_input"
                        }
                    }
                ],
                "tags": [
                    "vm_snapshot"
                ],
                "x-doc-hide": true,
                "summary": "Create VM snapshot",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "vm_snapshot",
                "description": "Given an intentful spec, creates a snapshot with associated metadata\n"
            }
        },
        "/vm_snapshots/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vm_snapshot"
                ],
                "x-doc-hide": true,
                "summary": "Get VM snapshots",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vm_snapshot",
                "description": "Get VM snapshots. Here is a list of supported filters\n- entity_uuid==UUID of the virtual machine\n"
            }
        },
        "/vm_snapshots/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_input"
                        }
                    }
                ],
                "tags": [
                    "vm_snapshot"
                ],
                "x-doc-hide": true,
                "summary": "Update VM snapshot",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "vm_snapshot",
                "description": "Given an intenful spec and snapshot UUID, update VM snapshot\n"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "vm_snapshot"
                ],
                "x-doc-hide": true,
                "summary": "Get VM snapshot",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vm_snapshot",
                "description": "Given a UUID, returns a VM snapshot definition"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "vm_snapshot"
                ],
                "x-doc-hide": true,
                "summary": "Delete VM snapshot",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "vm_snapshot",
                "description": "Delete a VM snapshot given its UUID"
            }
        },
        "/vms": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/vm_intent_input"
                        }
                    }
                ],
                "tags": [
                    "vms"
                ],
                "x-ntnx-operations": [
                    "create"
                ],
                "description": "This operation submits a request to create a VM based on the input parameters.\n",
                "x-ntnx-kind": "vm",
                "summary": "Create a VM"
            }
        },
        "/vms/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/vm_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vm_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vms"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "This operation gets a list of VMs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n",
                "x-ntnx-kind": "vm",
                "summary": "Get a list of VMs"
            }
        },
        "/vms/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/vm_intent_input"
                        }
                    }
                ],
                "tags": [
                    "vms"
                ],
                "x-ntnx-operations": [
                    "update",
                    "update_power_state"
                ],
                "description": "This operation submits a request to update a VM based on the input parameters.\n",
                "x-ntnx-kind": "vm",
                "summary": "Update a VM"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "vms"
                ],
                "x-ntnx-operations": [
                    "view"
                ],
                "description": "This operation gets a VM.",
                "x-ntnx-kind": "vm",
                "summary": "Get a VM"
            },
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "vms"
                ],
                "x-ntnx-operations": [
                    "delete"
                ],
                "description": "This operation submits a request to delete a VM.",
                "x-ntnx-kind": "vm",
                "summary": "Delete a VM"
            }
        },
        "/vmware/v6/accounts/{account_uuid}/templates/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "required": true,
                        "type": "string",
                        "description": "uuid of template"
                    },
                    {
                        "in": "path",
                        "name": "account_uuid",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "required": true,
                        "type": "string",
                        "description": "uuid of account"
                    }
                ],
                "tags": [
                    "vmware/template"
                ],
                "x-doc-hide": true,
                "summary": "Get vmware template",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_template",
                "description": "Given a UUID, returns a vmware template"
            }
        },
        "/vmware/v6/accounts/{account_uuid}/vms/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "required": true,
                        "type": "string",
                        "description": "uuid of vm"
                    },
                    {
                        "in": "path",
                        "name": "account_uuid",
                        "format": "UUID",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                        "required": true,
                        "type": "string",
                        "description": "uuid of account"
                    }
                ],
                "tags": [
                    "vmware/vm"
                ],
                "x-doc-hide": true,
                "summary": "Get vmware vm",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_vm",
                "description": "Given a UUID, returns a vmware vm"
            }
        },
        "/vmware/v6/cluster/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/cluster"
                ],
                "x-doc-hide": true,
                "summary": "List all clusters",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_cluster",
                "description": "List all clusters in a datacenter. Supported filters are:\n- account_uuid\n"
            }
        },
        "/vmware/v6/datacenter/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/datacenter"
                ],
                "x-doc-hide": true,
                "summary": "List datacenters",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_datacenter",
                "description": "List all datatcenters in a vcenter account. Supported filters are:\n- account_uuid\n"
            }
        },
        "/vmware/v6/datastore/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/datastore"
                ],
                "x-doc-hide": true,
                "summary": "List datastores",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_datastore",
                "description": "List all datastores in a host. Supported filters are:\n- account_uuid\n- hostname\n"
            }
        },
        "/vmware/v6/host/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/host"
                ],
                "x-doc-hide": true,
                "summary": "List all hosts",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_host",
                "description": "List all hosts in a datacenter. Supported filters are:\n- account_uuid\n"
            }
        },
        "/vmware/v6/network/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/network"
                ],
                "x-doc-hide": true,
                "summary": "List all networks",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_network",
                "description": "List all networks types supported by the host. Supported filters are:\n- account_uuid\n- hostname\n"
            }
        },
        "/vmware/v6/network_adapter/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/network_adapter"
                ],
                "x-doc-hide": true,
                "summary": "List all network adapters supported",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_netadapter",
                "description": "List all network adapter supported by vmware."
            }
        },
        "/vmware/v6/resourcepool/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/resourcepool"
                ],
                "x-doc-hide": true,
                "summary": "List resource pool",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_resourcepool",
                "description": "List all resource pools in a host. Supported filters are:\n- account_uuid\n- hostname\n"
            }
        },
        "/vmware/v6/storage_pod/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/storage_pod"
                ],
                "x-doc-hide": true,
                "summary": "List all storage_pods",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_storage_pod",
                "description": "List all storage_pods in a datacenter. Supported filters are:\n- account_uuid\n"
            }
        },
        "/vmware/v6/template/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/template"
                ],
                "x-doc-hide": true,
                "summary": "List vm templates",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_template",
                "description": "List all vm templates in a datacenter. Supported filters are:\n- account_uuid\n"
            }
        },
        "/vmware/v6/timezone/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/timezone"
                ],
                "x-doc-hide": true,
                "summary": "List all timezones",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_timezone",
                "description": "List all timezones supported by the guest os. Supported filters are:\n- account_uuid\n- guest_os\n"
            }
        },
        "/vmware/v6/vm/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                },
                "parameters": [
                    {
                        "description": "Request body",
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "vmware/vm"
                ],
                "x-doc-hide": true,
                "summary": "List all virtual machines",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "vmware_vm",
                "description": "List all virtual machines. Supported filters are:\n- account_uuid\n"
            }
        },
        "/volume_groups": {
            "post": {
                "description": "Creates a volume group.",
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "description": "Volume group object.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/volume_group_intent_input"
                        }
                    }
                ],
                "tags": [
                    "volume_group"
                ],
                "x-doc-hide": true,
                "summary": "Creates a volume group",
                "x-ntnx-operations": [
                    "create"
                ],
                "x-ntnx-kind": "volume_group",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/volume_group_intent_response"
                        }
                    }
                }
            }
        },
        "/volume_groups/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/volume_group_list_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "body",
                        "name": "get_entities_request",
                        "schema": {
                            "$ref": "#/definitions/volume_group_list_metadata"
                        }
                    }
                ],
                "tags": [
                    "volume_group"
                ],
                "x-doc-hide": true,
                "x-ntnx-ref-keys": [
                    "volume_group_reference",
                    "volume_group_reference_list"
                ],
                "summary": "Retrieves all volume groups.",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "volume_group",
                "description": "Retrieves all volume groups."
            }
        },
        "/volume_groups/{uuid}": {
            "put": {
                "description": "Updates specified volume group.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "description": "Volume group object.",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/volume_group_intent_input"
                        }
                    }
                ],
                "tags": [
                    "volume_group"
                ],
                "x-doc-hide": true,
                "summary": "Updates specified volume group",
                "x-ntnx-operations": [
                    "update"
                ],
                "x-ntnx-kind": "volume_group",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted",
                        "schema": {
                            "$ref": "#/definitions/volume_group_intent_response"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }
                }
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/volume_group_intent_response"
                        }
                    },
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "volume_group"
                ],
                "x-doc-hide": true,
                "x-ntnx-ref-keys": [
                    "volume_group_reference"
                ],
                "summary": "Retrieves specified volume group.",
                "x-ntnx-operations": [
                    "view"
                ],
                "x-ntnx-kind": "volume_group",
                "description": "Retrieves specified volume group."
            },
            "delete": {
                "description": "Deletes a volume group.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "tags": [
                    "volume_group"
                ],
                "x-doc-hide": true,
                "summary": "Deletes a volume group",
                "x-ntnx-operations": [
                    "delete"
                ],
                "x-ntnx-kind": "volume_group",
                "responses": {
                    "default": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    },
                    "202": {
                        "description": "Request Accepted"
                    },
                    "404": {
                        "description": "Invalid UUID provided",
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }
                }
            }
        }
    }
}