{
  "info": {
    "version": "3.1.0",
    "description": "Move programming from the user to the machine.",
    "title": "Nutanix Intentful API"
  },
  "host": "35.196.200.179:9440",
  "schemes": [
    "http"
  ],
  "paths": {
    "/categories/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/category_key_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/category_status"
            }
          }
        },
        "description": "List the category keys.\n",
        "parameters": [
          {
            "required": false,
            "in": "body",
            "name": "get_entities_request",
            "schema": {
              "$ref": "#/definitions/category_list_metadata"
            }
          }
        ],
        "tags": [
          "category"
        ],
        "x-ntnx-operations": [
          "view_name"
        ],
        "x-ntnx-kind": "category",
        "summary": "List the category keys."
      }
    },
    "/categories/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/category_key_status"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/category_key_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/category_status"
            }
          }
        },
        "description": "Create or Update a category Key.",
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "name",
            "in": "path",
            "maxLength": 64
          },
          {
            "required": true,
            "in": "body",
            "name": "spec",
            "schema": {
              "$ref": "#/definitions/category_key"
            }
          }
        ],
        "tags": [
          "category"
        ],
        "x-ntnx-operations": [
          "create_or_update_name"
        ],
        "x-ntnx-kind": "category",
        "summary": "Create or Update a category Key."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/category_key_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/category_status"
            }
          }
        },
        "description": "Get a category key.",
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "name",
            "in": "path",
            "maxLength": 64
          }
        ],
        "tags": [
          "category"
        ],
        "x-ntnx-operations": [
          "view_name"
        ],
        "x-ntnx-kind": "category",
        "summary": "Get a category key."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/category_status"
            }
          }
        },
        "description": "Delete a category Key.",
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "name",
            "in": "path",
            "maxLength": 64
          }
        ],
        "tags": [
          "category"
        ],
        "x-ntnx-operations": [
          "delete_name"
        ],
        "x-ntnx-kind": "category",
        "summary": "Delete a category Key."
      }
    },
    "/categories/{name}/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/category_value_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/category_status"
            }
          }
        },
        "description": "List the values for a specified key.\n",
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "name",
            "in": "path",
            "maxLength": 64
          },
          {
            "required": false,
            "in": "body",
            "name": "get_entities_request",
            "schema": {
              "$ref": "#/definitions/category_list_metadata"
            }
          }
        ],
        "tags": [
          "category"
        ],
        "x-ntnx-operations": [
          "view_value"
        ],
        "x-ntnx-kind": "category",
        "summary": "List the values for a specified key."
      }
    },
    "/categories/{name}/{value}": {
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/category_value_status"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/category_value_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/category_status"
            }
          }
        },
        "description": "Create or Update a category value. Creates when value doesn't exist.\n",
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "name",
            "in": "path",
            "maxLength": 64
          },
          {
            "required": true,
            "type": "string",
            "name": "value",
            "in": "path",
            "maxLength": 64
          },
          {
            "required": true,
            "in": "body",
            "name": "spec",
            "schema": {
              "$ref": "#/definitions/category_value"
            }
          }
        ],
        "tags": [
          "category"
        ],
        "x-ntnx-operations": [
          "create_or_update_value"
        ],
        "x-ntnx-kind": "category",
        "summary": "Create or Update a category value."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/category_value_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/category_status"
            }
          }
        },
        "description": "Get a category value.",
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "name",
            "in": "path",
            "maxLength": 64
          },
          {
            "required": true,
            "type": "string",
            "name": "value",
            "in": "path",
            "maxLength": 64
          }
        ],
        "tags": [
          "category"
        ],
        "x-ntnx-operations": [
          "view_value"
        ],
        "x-ntnx-kind": "category",
        "summary": "Get a category value."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/category_status"
            }
          }
        },
        "description": "Delete a category value.",
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "name",
            "in": "path",
            "maxLength": 64
          },
          {
            "required": true,
            "type": "string",
            "name": "value",
            "in": "path",
            "maxLength": 64
          }
        ],
        "tags": [
          "category"
        ],
        "x-ntnx-operations": [
          "delete_value"
        ],
        "x-ntnx-kind": "category",
        "summary": "Delete a category value."
      }
    },
    "/category/query": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/category_query_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/category_status"
            }
          }
        },
        "description": "Get list of entities attached to categories or policies in which categories are used as defined by the filter criteria.\n",
        "parameters": [
          {
            "in": "body",
            "name": "query",
            "schema": {
              "$ref": "#/definitions/category_query_input"
            }
          }
        ],
        "tags": [
          "category"
        ],
        "x-ntnx-operations": [
          "view_value"
        ],
        "x-ntnx-kind": "category",
        "summary": "Get category usage details."
      }
    }
  },
  "parameters": {
    "uuid": {
      "in": "path",
      "description": "The UUID of the entity.",
      "format": "UUID",
      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
      "required": true,
      "type": "string",
      "name": "uuid"
    }
  },
  "produces": [
    "application/json"
  ],
  "basePath": "/api/nutanix/v3",
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "category_key_list_response": {
      "title": "Category key list response.",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/category_key_status"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string",
          "description": "Api Version."
        },
        "metadata": {
          "$ref": "#/definitions/category_list_metadata"
        }
      },
      "description": "Category key list response."
    },
    "category_status": {
      "title": "Response Kind",
      "type": "object",
      "properties": {
        "kind": {
          "default": "category",
          "readOnly": false,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "category"
          ]
        },
        "code": {
          "readOnly": false,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": false,
          "type": "array"
        },
        "state": {
          "readOnly": false,
          "type": "string"
        },
        "api_version": {
          "readOnly": false,
          "type": "string"
        }
      },
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
    },
    "category_list_metadata": {
      "title": "Metadata for category list",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "kind": {
          "default": "category",
          "x-ntnx-enum": [
            "category"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        }
      },
      "description": "All api calls that return a list will have this metadata block as input\n"
    },
    "category_key_status": {
      "title": "Category Key Definition.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the category.",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "description": "Name of the category.",
          "maxLength": 64
        },
        "api_version": {
          "type": "string",
          "description": "API version."
        },
        "system_defined": {
          "readOnly": false,
          "type": "boolean",
          "description": "Specifying whether its a system defined category."
        }
      },
      "description": "Category Key Definition."
    },
    "category_key": {
      "title": "Category Key definition.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the category.",
          "maxLength": 64
        },
        "api_version": {
          "type": "string",
          "description": "API version."
        },
        "description": {
          "type": "string",
          "description": "Description of the category.",
          "maxLength": 1000
        }
      },
      "description": "Category key definition."
    },
    "category_value_list_response": {
      "title": "Category value list response.",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/category_value_status"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/category_list_metadata"
        }
      },
      "description": "Category Value list response."
    },
    "category_value_status": {
      "title": "Category Value Definition.",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the category value.",
          "maxLength": 1000
        },
        "api_version": {
          "type": "string",
          "description": "API version."
        },
        "name": {
          "readOnly": false,
          "type": "string",
          "description": "The name of the category.",
          "maxLength": 64
        },
        "value": {
          "type": "string",
          "description": "The value of the category.",
          "maxLength": 64
        },
        "system_defined": {
          "readOnly": false,
          "type": "boolean",
          "description": "Specifying whether its a system defined category."
        }
      },
      "description": "Category value definition."
    },
    "category_value": {
      "title": "Category Value definition.",
      "type": "object",
      "properties": {
        "api_version": {
          "type": "string",
          "description": "API version."
        },
        "value": {
          "type": "string",
          "description": "Value for the category.",
          "maxLength": 64
        },
        "description": {
          "type": "string",
          "description": "Description of the category value.",
          "maxLength": 1000
        }
      },
      "description": "Category value definition."
    },
    "category_query_response": {
      "title": "Category Query Response",
      "type": "object",
      "properties": {
        "results": {
          "items": {
            "type": "object",
            "properties": {
              "filtered_entity_count": {
                "type": "integer",
                "description": "Total number of filtered results.",
                "format": "int64"
              },
              "kind": {
                "type": "string",
                "description": "The entity kind."
              },
              "entity_any_reference_list": {
                "items": {
                  "$ref": "#/definitions/entity_reference"
                },
                "type": "array",
                "description": "List of entity references."
              },
              "total_entity_count": {
                "type": "integer",
                "description": "Total number of the matched results.",
                "format": "int64"
              }
            }
          },
          "type": "array"
        },
        "api_version": {
          "type": "string",
          "description": "API version."
        },
        "metadata": {
          "type": "object",
          "description": "Response metadata.",
          "properties": {
            "total_matches": {
              "type": "integer",
              "description": "Total number of matched results.",
              "format": "int64"
            },
            "usage_type": {
              "$ref": "#/definitions/category_query_usage_type"
            },
            "group_member_offset": {
              "type": "integer",
              "description": "The offset into the total records set to return per group.\n",
              "format": "int64"
            },
            "group_member_count": {
              "type": "integer",
              "description": "The maximum number of records to return per group.",
              "format": "int64"
            }
          }
        }
      },
      "description": "Categories query response object."
    },
    "category_query_input": {
      "title": "Category Query Input",
      "type": "object",
      "properties": {
        "usage_type": {
          "$ref": "#/definitions/category_query_usage_type"
        },
        "group_member_offset": {
          "type": "integer",
          "description": "The offset into the total member set to return per group.",
          "format": "int64"
        },
        "group_member_count": {
          "type": "integer",
          "description": "The maximum number of members to return per group.",
          "format": "int64"
        },
        "category_filter": {
          "$ref": "#/definitions/category_filter"
        },
        "api_version": {
          "type": "string",
          "description": "API version."
        }
      },
      "description": "Categories query input object."
    },
    "message_resource": {
      "title": "Message.",
      "required": [
        "message",
        "reason"
      ],
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "If state is ERROR, a message describing the error."
        },
        "reason": {
          "x-ntnx-enum": [
            "ACCESS_DENIED",
            "ACCESS_FORBIDDEN",
            "ACTION_NOT_SUPPORTED",
            "AUTHENTICATION_REQUIRED",
            "BEARER_TOKEN_EXPIRED",
            "BEARER_TOKEN_BAD_SIGNATURE",
            "CANNOT_MODIFY_PRE_CONFIGURED_REPORT",
            "CATEGORY_NAME_VALUE_MISMATCH",
            "CONFIGURATION_INCOMPLETE",
            "CONCURRENT_REQUESTS_NOT_ALLOWED",
            "DEFAULT_PROJECT_UNAVAILABLE",
            "DESERIALIZATION_FAILED",
            "DIRECTORY_SERVICE_CONNECTION_FAILED",
            "ENTITY_ALREADY_EXISTS",
            "ENTITY_DELETION_FAILED",
            "ENTITY_IS_READONLY",
            "ENTITY_NAME_UUID_MISMATCH",
            "ENTITY_NOT_CONFIGURED",
            "ENTITY_NOT_FOUND",
            "ENTITY_SAVE_ERROR",
            "ENTITY_UPDATE_FAILED",
            "IDEMPOTENCE_UUID_CREATION_FAILED",
            "IDP_NOT_REACHABLE",
            "INTERNAL_ERROR",
            "INVALID_ARGUMENT",
            "INVALID_AZ_NAME",
            "INVALID_CONTENT_TYPE",
            "INVALID_DATA_FORMAT",
            "INVALID_PORTAL_CONFIGURATION",
            "INVALID_REQUEST",
            "INVALID_UUID",
            "INVALID_OWNER_REFERENCE",
            "INTERNAL_AZ_PROXY_SETUP_ERROR",
            "INTERNAL_ERROR_REMOTE_REQUEST",
            "INTERNAL_ROLE_ACCESS_DENIED",
            "INCORRECT_EVENTS_FILTER",
            "MISSING_ATTRIBUTE",
            "MISSING_CURRENT_USER_METADATA",
            "NAME_NOT_IN_DOMAIN",
            "NO_RESPONSE_RECEIVED_FROM_PORTAL",
            "PE_NOT_PAIRED_WITH_PC",
            "PC_NOT_PAIRED_WITH_XI_PORTAL",
            "REFERENCE_ERROR",
            "RESERVED_ROLE_ACCESS_DENIED",
            "REQUEST_NOT_SUPPORTED",
            "REMOTE_CLUSTER_IP_FETCH_FAILED",
            "REMOTE_CLUSTER_NOT_CONNECTED",
            "REMOTE_CONNECTION_EXISTS",
            "REMOTE_CONNECTION_NOT_FOUND",
            "REPORT_CONFIG_NOT_FOUND",
            "REPORTING_RESOURCE_NOT_FOUND",
            "REPORTING_INTERNAL_ERROR",
            "SERVICE_UNAVAILABLE",
            "SEARCH_RESULT_PROCESSING_ERROR",
            "TOO_MANY_REQUESTS",
            "UNCONFIGURED_API_KEY",
            "UNCONFIGURED_PORTAL_CONNECTION",
            "UNSPECIFIED_EVENTS_FILTER",
            "UNSUPPORTED_AZ_PROXY_API",
            "UNSUPPORTED_MEDIA_TYPE_ERROR",
            "UNSUPPORTED_API_VERSION",
            "UPLOAD_TO_S3_FAILED",
            "VALIDATION_ERROR",
            "INVALID_SSL_CERTIFICATE",
            "ERROR_ATTACHING_FILE_TO_CASE",
            "SPEC_UPDATE_ERROR",
            "SPEC_INCOMPATIBLE_ERROR"
          ],
          "type": "string",
          "description": "If state is ERROR, a machine-readable snake-cased string."
        },
        "details": {
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": false,
          "type": "object",
          "description": "Custom key-value details relevant to the status."
        }
      },
      "description": "message."
    },
    "sort_order": {
      "x-ntnx-enum": [
        "ASCENDING",
        "DESCENDING"
      ],
      "type": "string",
      "description": "The sort order in which results are returned",
      "title": "Sort order"
    },
    "entity_reference": {
      "title": "Entity Reference.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of the reference."
        },
        "type": {
          "x-ntnx-enum": [
            "CATEGORIES_MATCH_ALL",
            "CATEGORIES_MATCH_ANY"
          ],
          "type": "string",
          "description": "The type of filter being used."
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "UUID of the entity.",
          "format": "UUID"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the entity.",
          "maxLength": 64
        }
      },
      "description": "Reference to an entity."
    },
    "category_query_usage_type": {
      "x-ntnx-enum": [
        "USED_IN",
        "APPLIED_TO"
      ],
      "type": "string",
      "description": "USED_IN - to get policies in which specified categories are used.\nAPPLIED_TO - to get entities attached to specified categories.\n",
      "title": "Query Usage Type"
    },
    "category_filter": {
      "title": "A category filter",
      "required": [
        "params"
      ],
      "type": "object",
      "properties": {
        "type": {
          "default": "CATEGORIES_MATCH_ANY",
          "x-ntnx-enum": [
            "CATEGORIES_MATCH_ALL",
            "CATEGORIES_MATCH_ANY"
          ],
          "type": "string",
          "description": "The type of the filter being used."
        },
        "kind_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of kinds associated with this filter."
        },
        "params": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "string"
          },
          "type": "object",
          "description": "A list of category key and list of values."
        }
      },
      "description": "A category filter."
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "swagger": "2.0"
}